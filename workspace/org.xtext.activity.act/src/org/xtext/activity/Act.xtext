grammar org.xtext.activity.Act with org.eclipse.xtext.common.Terminals

// automatically generated by Xtext

import "platform:/resource/FarmingModeling/model/activity.ecore"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore


Model returns Model: 
	{Model}
	(atelier+=Atelier)*
;

Atelier returns Atelier:
	{Atelier}
	'atelier'
	id=EString
	'{'
		(activity+=PeriodicActivity)*
	'}'
;

PeriodicActivity returns PeriodicActivity:
	{PeriodicActivity}
	'PeriodicActivity'
	name=EString
	'{'
		'from' start=Date 'to' end=Date ','		
		('every' (frequency=EInt)? periodicityType=Periodicity ',')?
		('allocate' '{' resAllocation+=ResAllocation ( "," resAllocation+=ResAllocation)* '}' ',' )?
		('rules' ':' rule+=BinaryExppression ',' )?
	'}';

Date returns Date:
	{Date}
	day=EInt 
	month=Month
	year=EInt
	;


ResAllocation returns RessourceAllocation:
	{RessourceAllocation}
	'reserve' ressourceType=EnumTypeRessource
	'for' duration=EInt 
	periodicityType=Periodicity
	;

Predicate returns Predicat:
	{Predicat}
	('before' date=Date)|CheckDoneActivity|NoRain|Temperature|Precipitation|Rayonnement|Evapotranspiration|GrainState
	;
	

BinaryExppression returns BinaryExpression:
		{BinaryExpression}
		(left=Predicate|('(' left=BinaryExppression ')'))
		(ope=BinaryExppressionType right=BinaryExppression)?
	;
	
/**
 * WHEATER
 */

Temperature returns Temperature:
	{Temperature}
	('tm'|'temperature') comparator=Comparator 'than' value=EFloat
;

Precipitation returns Precipitation:
	{Precipitation}
	('rr'|'precipitation') comparator=Comparator 'than' height=EFloat
;

Rayonnement returns Rayonnement:
	{Rayonnement}
	('par'|'rayonnement') comparator=Comparator 'than' value=EFloat
;

Evapotranspiration returns EvapoTranspiration:
	{EvapoTranspiration}
	('etp'|'evapotranspiration') comparator=Comparator 'than' value=EFloat
;

/*********/
	
CheckDoneActivity returns CheckDoneActivity:
	{CheckDoneActivity}
	'activity' activityToValidate=[PeriodicActivity] 'done' (elapsedTime=EInt periodicityType=Periodicity 'ago')|(date=Date)
	;
	
NoRain returns NoRain:
	{NoRain}
	'noRain' (('for' elapsedTime=EInt periodicityType=Periodicity)|('since' date=Date))
;

GrainState returns GrainState:
	{GrainState}
	'grain' 'is' state=GrainStateEnum
;

	
/**
 * ENUMERATION
 */
enum Periodicity returns periodicity:
	month|days|weeks|years|hours
;

enum Month returns Month:
	january|february|march|april|may|june|july|august|september|october|november|december
;

enum Comparator returns ComparatorType:
	inferior|inferiorOrEqual|equal|different|superior|superiorOrEqual
;

enum BinaryExppressionType returns BinaryExpressionType:
	AND|OR|XOR
;

enum GrainStateEnum returns GrainStateEnum:
	MATURE|IMMATURE
;

enum EnumTypeRessource returns EnumTypeRessource:
	Worker|Tractor
;

/**
 * TYPE
 */
EString returns ecore::EString:
	STRING | ID;
	
EInt returns ecore::EInt:
	'-'? INT;
	
EFloat returns ecore::EFloat:
	INT '.' INT;
	
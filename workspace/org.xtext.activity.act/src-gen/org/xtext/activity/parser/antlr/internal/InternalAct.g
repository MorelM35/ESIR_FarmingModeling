/*
* generated by Xtext
*/
grammar InternalAct;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.activity.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.activity.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.activity.services.ActGrammarAccess;

}

@parser::members {

 	private ActGrammarAccess grammarAccess;
 	
    public InternalActParser(TokenStream input, ActGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected ActGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getModelAccess().getModelAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getAtelierAtelierParserRuleCall_1_0()); 
	    }
		lv_atelier_1_0=ruleAtelier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"atelier",
        		lv_atelier_1_0, 
        		"Atelier");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleAtelier
entryRuleAtelier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtelierRule()); }
	 iv_ruleAtelier=ruleAtelier 
	 { $current=$iv_ruleAtelier.current; } 
	 EOF 
;

// Rule Atelier
ruleAtelier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtelierAccess().getAtelierAction_0(),
            $current);
    }
)	otherlv_1='atelier' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAtelierAccess().getAtelierKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtelierAccess().getIdEStringParserRuleCall_2_0()); 
	    }
		lv_id_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtelierRule());
	        }
       		set(
       			$current, 
       			"id",
        		lv_id_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAtelierAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtelierAccess().getActivityPeriodicActivityParserRuleCall_4_0()); 
	    }
		lv_activity_4_0=rulePeriodicActivity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtelierRule());
	        }
       		add(
       			$current, 
       			"activity",
        		lv_activity_4_0, 
        		"PeriodicActivity");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAtelierAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRulePeriodicActivity
entryRulePeriodicActivity returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPeriodicActivityRule()); }
	 iv_rulePeriodicActivity=rulePeriodicActivity 
	 { $current=$iv_rulePeriodicActivity.current; } 
	 EOF 
;

// Rule PeriodicActivity
rulePeriodicActivity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPeriodicActivityAccess().getPeriodicActivityAction_0(),
            $current);
    }
)	otherlv_1='PeriodicActivity' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPeriodicActivityAccess().getPeriodicActivityKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPeriodicActivityAccess().getNameEStringParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPeriodicActivityRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPeriodicActivityAccess().getLeftCurlyBracketKeyword_3());
    }
	otherlv_4='from' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPeriodicActivityAccess().getFromKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPeriodicActivityAccess().getStartDateParserRuleCall_5_0()); 
	    }
		lv_start_5_0=ruleDate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPeriodicActivityRule());
	        }
       		set(
       			$current, 
       			"start",
        		lv_start_5_0, 
        		"Date");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='to' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getPeriodicActivityAccess().getToKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPeriodicActivityAccess().getEndDateParserRuleCall_7_0()); 
	    }
		lv_end_7_0=ruleDate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPeriodicActivityRule());
	        }
       		set(
       			$current, 
       			"end",
        		lv_end_7_0, 
        		"Date");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getPeriodicActivityAccess().getCommaKeyword_8());
    }
(	otherlv_9='every' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getPeriodicActivityAccess().getEveryKeyword_9_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPeriodicActivityAccess().getFrequencyEIntParserRuleCall_9_1_0()); 
	    }
		lv_frequency_10_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPeriodicActivityRule());
	        }
       		set(
       			$current, 
       			"frequency",
        		lv_frequency_10_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getPeriodicActivityAccess().getPeriodicityTypePeriodicityEnumRuleCall_9_2_0()); 
	    }
		lv_periodicityType_11_0=rulePeriodicity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPeriodicActivityRule());
	        }
       		set(
       			$current, 
       			"periodicityType",
        		lv_periodicityType_11_0, 
        		"Periodicity");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_12=',' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getPeriodicActivityAccess().getCommaKeyword_9_3());
    }
)?(	otherlv_13='allocate' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getPeriodicActivityAccess().getAllocateKeyword_10_0());
    }
	otherlv_14='{' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getPeriodicActivityAccess().getLeftCurlyBracketKeyword_10_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPeriodicActivityAccess().getResAllocationResAllocationParserRuleCall_10_2_0()); 
	    }
		lv_resAllocation_15_0=ruleResAllocation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPeriodicActivityRule());
	        }
       		add(
       			$current, 
       			"resAllocation",
        		lv_resAllocation_15_0, 
        		"ResAllocation");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_16=',' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getPeriodicActivityAccess().getCommaKeyword_10_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPeriodicActivityAccess().getResAllocationResAllocationParserRuleCall_10_3_1_0()); 
	    }
		lv_resAllocation_17_0=ruleResAllocation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPeriodicActivityRule());
	        }
       		add(
       			$current, 
       			"resAllocation",
        		lv_resAllocation_17_0, 
        		"ResAllocation");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_18='}' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getPeriodicActivityAccess().getRightCurlyBracketKeyword_10_4());
    }
	otherlv_19=',' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getPeriodicActivityAccess().getCommaKeyword_10_5());
    }
)?(	otherlv_20='rules' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getPeriodicActivityAccess().getRulesKeyword_11_0());
    }
	otherlv_21=':' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getPeriodicActivityAccess().getColonKeyword_11_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPeriodicActivityAccess().getRuleBinaryExppressionParserRuleCall_11_2_0()); 
	    }
		lv_rule_22_0=ruleBinaryExppression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPeriodicActivityRule());
	        }
       		add(
       			$current, 
       			"rule",
        		lv_rule_22_0, 
        		"BinaryExppression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_23=',' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getPeriodicActivityAccess().getCommaKeyword_11_3());
    }
)?	otherlv_24='}' 
    {
    	newLeafNode(otherlv_24, grammarAccess.getPeriodicActivityAccess().getRightCurlyBracketKeyword_12());
    }
)
;





// Entry rule entryRuleDate
entryRuleDate returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDateRule()); }
	 iv_ruleDate=ruleDate 
	 { $current=$iv_ruleDate.current; } 
	 EOF 
;

// Rule Date
ruleDate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDateAccess().getDateAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDateAccess().getDayEIntParserRuleCall_1_0()); 
	    }
		lv_day_1_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDateRule());
	        }
       		set(
       			$current, 
       			"day",
        		lv_day_1_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDateAccess().getMonthMonthEnumRuleCall_2_0()); 
	    }
		lv_month_2_0=ruleMonth		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDateRule());
	        }
       		set(
       			$current, 
       			"month",
        		lv_month_2_0, 
        		"Month");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDateAccess().getYearEIntParserRuleCall_3_0()); 
	    }
		lv_year_3_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDateRule());
	        }
       		set(
       			$current, 
       			"year",
        		lv_year_3_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleResAllocation
entryRuleResAllocation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getResAllocationRule()); }
	 iv_ruleResAllocation=ruleResAllocation 
	 { $current=$iv_ruleResAllocation.current; } 
	 EOF 
;

// Rule ResAllocation
ruleResAllocation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getResAllocationAccess().getRessourceAllocationAction_0(),
            $current);
    }
)	otherlv_1='reserve' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getResAllocationAccess().getReserveKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getResAllocationAccess().getRessourceTypeEnumTypeRessourceEnumRuleCall_2_0()); 
	    }
		lv_ressourceType_2_0=ruleEnumTypeRessource		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getResAllocationRule());
	        }
       		set(
       			$current, 
       			"ressourceType",
        		lv_ressourceType_2_0, 
        		"EnumTypeRessource");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='for' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getResAllocationAccess().getForKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getResAllocationAccess().getDurationEIntParserRuleCall_4_0()); 
	    }
		lv_duration_4_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getResAllocationRule());
	        }
       		set(
       			$current, 
       			"duration",
        		lv_duration_4_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getResAllocationAccess().getPeriodicityTypePeriodicityEnumRuleCall_5_0()); 
	    }
		lv_periodicityType_5_0=rulePeriodicity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getResAllocationRule());
	        }
       		set(
       			$current, 
       			"periodicityType",
        		lv_periodicityType_5_0, 
        		"Periodicity");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePredicate
entryRulePredicate returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPredicateRule()); }
	 iv_rulePredicate=rulePredicate 
	 { $current=$iv_rulePredicate.current; } 
	 EOF 
;

// Rule Predicate
rulePredicate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPredicateAccess().getPredicatAction_0_0(),
            $current);
    }
)(	otherlv_1='before' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPredicateAccess().getBeforeKeyword_0_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPredicateAccess().getDateDateParserRuleCall_0_1_1_0()); 
	    }
		lv_date_2_0=ruleDate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredicateRule());
	        }
       		set(
       			$current, 
       			"date",
        		lv_date_2_0, 
        		"Date");
	        afterParserOrEnumRuleCall();
	    }

)
)))
    |
    { 
        newCompositeNode(grammarAccess.getPredicateAccess().getCheckDoneActivityParserRuleCall_1()); 
    }
    this_CheckDoneActivity_3=ruleCheckDoneActivity
    { 
        $current = $this_CheckDoneActivity_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPredicateAccess().getNoRainParserRuleCall_2()); 
    }
    this_NoRain_4=ruleNoRain
    { 
        $current = $this_NoRain_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPredicateAccess().getTemperatureParserRuleCall_3()); 
    }
    this_Temperature_5=ruleTemperature
    { 
        $current = $this_Temperature_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPredicateAccess().getPrecipitationParserRuleCall_4()); 
    }
    this_Precipitation_6=rulePrecipitation
    { 
        $current = $this_Precipitation_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPredicateAccess().getRayonnementParserRuleCall_5()); 
    }
    this_Rayonnement_7=ruleRayonnement
    { 
        $current = $this_Rayonnement_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPredicateAccess().getEvapotranspirationParserRuleCall_6()); 
    }
    this_Evapotranspiration_8=ruleEvapotranspiration
    { 
        $current = $this_Evapotranspiration_8.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPredicateAccess().getGrainStateParserRuleCall_7()); 
    }
    this_GrainState_9=ruleGrainState
    { 
        $current = $this_GrainState_9.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBinaryExppression
entryRuleBinaryExppression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBinaryExppressionRule()); }
	 iv_ruleBinaryExppression=ruleBinaryExppression 
	 { $current=$iv_ruleBinaryExppression.current; } 
	 EOF 
;

// Rule BinaryExppression
ruleBinaryExppression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBinaryExppressionAccess().getBinaryExpressionAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryExppressionAccess().getLeftPredicateParserRuleCall_1_0_0()); 
	    }
		lv_left_1_0=rulePredicate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryExppressionRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_1_0, 
        		"Predicate");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBinaryExppressionAccess().getLeftParenthesisKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryExppressionAccess().getLeftBinaryExppressionParserRuleCall_1_1_1_0()); 
	    }
		lv_left_3_0=ruleBinaryExppression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryExppressionRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_3_0, 
        		"BinaryExppression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBinaryExppressionAccess().getRightParenthesisKeyword_1_1_2());
    }
))((
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryExppressionAccess().getOpeBinaryExppressionTypeEnumRuleCall_2_0_0()); 
	    }
		lv_ope_5_0=ruleBinaryExppressionType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryExppressionRule());
	        }
       		set(
       			$current, 
       			"ope",
        		lv_ope_5_0, 
        		"BinaryExppressionType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryExppressionAccess().getRightBinaryExppressionParserRuleCall_2_1_0()); 
	    }
		lv_right_6_0=ruleBinaryExppression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryExppressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_6_0, 
        		"BinaryExppression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleTemperature
entryRuleTemperature returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTemperatureRule()); }
	 iv_ruleTemperature=ruleTemperature 
	 { $current=$iv_ruleTemperature.current; } 
	 EOF 
;

// Rule Temperature
ruleTemperature returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTemperatureAccess().getTemperatureAction_0(),
            $current);
    }
)(	otherlv_1='tm' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTemperatureAccess().getTmKeyword_1_0());
    }

    |	otherlv_2='temperature' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTemperatureAccess().getTemperatureKeyword_1_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTemperatureAccess().getComparatorComparatorEnumRuleCall_2_0()); 
	    }
		lv_comparator_3_0=ruleComparator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemperatureRule());
	        }
       		set(
       			$current, 
       			"comparator",
        		lv_comparator_3_0, 
        		"Comparator");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='than' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTemperatureAccess().getThanKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTemperatureAccess().getValueEFloatParserRuleCall_4_0()); 
	    }
		lv_value_5_0=ruleEFloat		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemperatureRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_5_0, 
        		"EFloat");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePrecipitation
entryRulePrecipitation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrecipitationRule()); }
	 iv_rulePrecipitation=rulePrecipitation 
	 { $current=$iv_rulePrecipitation.current; } 
	 EOF 
;

// Rule Precipitation
rulePrecipitation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrecipitationAccess().getPrecipitationAction_0(),
            $current);
    }
)(	otherlv_1='rr' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPrecipitationAccess().getRrKeyword_1_0());
    }

    |	otherlv_2='precipitation' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPrecipitationAccess().getPrecipitationKeyword_1_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrecipitationAccess().getComparatorComparatorEnumRuleCall_2_0()); 
	    }
		lv_comparator_3_0=ruleComparator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrecipitationRule());
	        }
       		set(
       			$current, 
       			"comparator",
        		lv_comparator_3_0, 
        		"Comparator");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='than' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPrecipitationAccess().getThanKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrecipitationAccess().getHeightEFloatParserRuleCall_4_0()); 
	    }
		lv_height_5_0=ruleEFloat		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrecipitationRule());
	        }
       		set(
       			$current, 
       			"height",
        		lv_height_5_0, 
        		"EFloat");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleRayonnement
entryRuleRayonnement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRayonnementRule()); }
	 iv_ruleRayonnement=ruleRayonnement 
	 { $current=$iv_ruleRayonnement.current; } 
	 EOF 
;

// Rule Rayonnement
ruleRayonnement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getRayonnementAccess().getRayonnementAction_0(),
            $current);
    }
)(	otherlv_1='par' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRayonnementAccess().getParKeyword_1_0());
    }

    |	otherlv_2='rayonnement' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRayonnementAccess().getRayonnementKeyword_1_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRayonnementAccess().getComparatorComparatorEnumRuleCall_2_0()); 
	    }
		lv_comparator_3_0=ruleComparator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRayonnementRule());
	        }
       		set(
       			$current, 
       			"comparator",
        		lv_comparator_3_0, 
        		"Comparator");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='than' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRayonnementAccess().getThanKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRayonnementAccess().getValueEFloatParserRuleCall_4_0()); 
	    }
		lv_value_5_0=ruleEFloat		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRayonnementRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_5_0, 
        		"EFloat");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleEvapotranspiration
entryRuleEvapotranspiration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEvapotranspirationRule()); }
	 iv_ruleEvapotranspiration=ruleEvapotranspiration 
	 { $current=$iv_ruleEvapotranspiration.current; } 
	 EOF 
;

// Rule Evapotranspiration
ruleEvapotranspiration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getEvapotranspirationAccess().getEvapoTranspirationAction_0(),
            $current);
    }
)(	otherlv_1='etp' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEvapotranspirationAccess().getEtpKeyword_1_0());
    }

    |	otherlv_2='evapotranspiration' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEvapotranspirationAccess().getEvapotranspirationKeyword_1_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEvapotranspirationAccess().getComparatorComparatorEnumRuleCall_2_0()); 
	    }
		lv_comparator_3_0=ruleComparator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEvapotranspirationRule());
	        }
       		set(
       			$current, 
       			"comparator",
        		lv_comparator_3_0, 
        		"Comparator");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='than' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEvapotranspirationAccess().getThanKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEvapotranspirationAccess().getValueEFloatParserRuleCall_4_0()); 
	    }
		lv_value_5_0=ruleEFloat		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEvapotranspirationRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_5_0, 
        		"EFloat");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleCheckDoneActivity
entryRuleCheckDoneActivity returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCheckDoneActivityRule()); }
	 iv_ruleCheckDoneActivity=ruleCheckDoneActivity 
	 { $current=$iv_ruleCheckDoneActivity.current; } 
	 EOF 
;

// Rule CheckDoneActivity
ruleCheckDoneActivity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getCheckDoneActivityAccess().getCheckDoneActivityAction_0_0(),
            $current);
    }
)	otherlv_1='activity' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCheckDoneActivityAccess().getActivityKeyword_0_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getCheckDoneActivityRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getCheckDoneActivityAccess().getActivityToValidatePeriodicActivityCrossReference_0_2_0()); 
	}

)
)	otherlv_3='done' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCheckDoneActivityAccess().getDoneKeyword_0_3());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getCheckDoneActivityAccess().getElapsedTimeEIntParserRuleCall_0_4_0_0()); 
	    }
		lv_elapsedTime_4_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCheckDoneActivityRule());
	        }
       		set(
       			$current, 
       			"elapsedTime",
        		lv_elapsedTime_4_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCheckDoneActivityAccess().getPeriodicityTypePeriodicityEnumRuleCall_0_4_1_0()); 
	    }
		lv_periodicityType_5_0=rulePeriodicity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCheckDoneActivityRule());
	        }
       		set(
       			$current, 
       			"periodicityType",
        		lv_periodicityType_5_0, 
        		"Periodicity");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='ago' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getCheckDoneActivityAccess().getAgoKeyword_0_4_2());
    }
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getCheckDoneActivityAccess().getDateDateParserRuleCall_1_0()); 
	    }
		lv_date_7_0=ruleDate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCheckDoneActivityRule());
	        }
       		set(
       			$current, 
       			"date",
        		lv_date_7_0, 
        		"Date");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleNoRain
entryRuleNoRain returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNoRainRule()); }
	 iv_ruleNoRain=ruleNoRain 
	 { $current=$iv_ruleNoRain.current; } 
	 EOF 
;

// Rule NoRain
ruleNoRain returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNoRainAccess().getNoRainAction_0(),
            $current);
    }
)	otherlv_1='noRain' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNoRainAccess().getNoRainKeyword_1());
    }
((	otherlv_2='for' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNoRainAccess().getForKeyword_2_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNoRainAccess().getElapsedTimeEIntParserRuleCall_2_0_1_0()); 
	    }
		lv_elapsedTime_3_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNoRainRule());
	        }
       		set(
       			$current, 
       			"elapsedTime",
        		lv_elapsedTime_3_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNoRainAccess().getPeriodicityTypePeriodicityEnumRuleCall_2_0_2_0()); 
	    }
		lv_periodicityType_4_0=rulePeriodicity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNoRainRule());
	        }
       		set(
       			$current, 
       			"periodicityType",
        		lv_periodicityType_4_0, 
        		"Periodicity");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_5='since' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getNoRainAccess().getSinceKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNoRainAccess().getDateDateParserRuleCall_2_1_1_0()); 
	    }
		lv_date_6_0=ruleDate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNoRainRule());
	        }
       		set(
       			$current, 
       			"date",
        		lv_date_6_0, 
        		"Date");
	        afterParserOrEnumRuleCall();
	    }

)
))))
;





// Entry rule entryRuleGrainState
entryRuleGrainState returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGrainStateRule()); }
	 iv_ruleGrainState=ruleGrainState 
	 { $current=$iv_ruleGrainState.current; } 
	 EOF 
;

// Rule GrainState
ruleGrainState returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getGrainStateAccess().getGrainStateAction_0(),
            $current);
    }
)	otherlv_1='grain' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGrainStateAccess().getGrainKeyword_1());
    }
	otherlv_2='is' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getGrainStateAccess().getIsKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGrainStateAccess().getStateGrainStateEnumEnumRuleCall_3_0()); 
	    }
		lv_state_3_0=ruleGrainStateEnum		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGrainStateRule());
	        }
       		set(
       			$current, 
       			"state",
        		lv_state_3_0, 
        		"GrainStateEnum");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEIntRule()); } 
	 iv_ruleEInt=ruleEInt 
	 { $current=$iv_ruleEInt.current.getText(); }  
	 EOF 
;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleEFloat
entryRuleEFloat returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEFloatRule()); } 
	 iv_ruleEFloat=ruleEFloat 
	 { $current=$iv_ruleEFloat.current.getText(); }  
	 EOF 
;

// Rule EFloat
ruleEFloat returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getEFloatAccess().getINTTerminalRuleCall_0()); 
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEFloatAccess().getFullStopKeyword_1()); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getEFloatAccess().getINTTerminalRuleCall_2()); 
    }
)
    ;





// Rule Periodicity
rulePeriodicity returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='months' 
	{
        $current = grammarAccess.getPeriodicityAccess().getMonthEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getPeriodicityAccess().getMonthEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='days' 
	{
        $current = grammarAccess.getPeriodicityAccess().getDaysEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getPeriodicityAccess().getDaysEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='weeks' 
	{
        $current = grammarAccess.getPeriodicityAccess().getWeeksEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getPeriodicityAccess().getWeeksEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='years' 
	{
        $current = grammarAccess.getPeriodicityAccess().getYearsEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getPeriodicityAccess().getYearsEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='hours' 
	{
        $current = grammarAccess.getPeriodicityAccess().getHoursEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getPeriodicityAccess().getHoursEnumLiteralDeclaration_4()); 
    }
));



// Rule Month
ruleMonth returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='january' 
	{
        $current = grammarAccess.getMonthAccess().getJanuaryEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getMonthAccess().getJanuaryEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='february' 
	{
        $current = grammarAccess.getMonthAccess().getFebruaryEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getMonthAccess().getFebruaryEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='march' 
	{
        $current = grammarAccess.getMonthAccess().getMarchEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getMonthAccess().getMarchEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='april' 
	{
        $current = grammarAccess.getMonthAccess().getAprilEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getMonthAccess().getAprilEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='may' 
	{
        $current = grammarAccess.getMonthAccess().getMayEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getMonthAccess().getMayEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='june' 
	{
        $current = grammarAccess.getMonthAccess().getJuneEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getMonthAccess().getJuneEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='july' 
	{
        $current = grammarAccess.getMonthAccess().getJulyEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getMonthAccess().getJulyEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='august' 
	{
        $current = grammarAccess.getMonthAccess().getAugustEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getMonthAccess().getAugustEnumLiteralDeclaration_7()); 
    }
)
    |(	enumLiteral_8='september' 
	{
        $current = grammarAccess.getMonthAccess().getSeptemberEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getMonthAccess().getSeptemberEnumLiteralDeclaration_8()); 
    }
)
    |(	enumLiteral_9='october' 
	{
        $current = grammarAccess.getMonthAccess().getOctoberEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_9, grammarAccess.getMonthAccess().getOctoberEnumLiteralDeclaration_9()); 
    }
)
    |(	enumLiteral_10='november' 
	{
        $current = grammarAccess.getMonthAccess().getNovemberEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_10, grammarAccess.getMonthAccess().getNovemberEnumLiteralDeclaration_10()); 
    }
)
    |(	enumLiteral_11='december' 
	{
        $current = grammarAccess.getMonthAccess().getDecemberEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_11, grammarAccess.getMonthAccess().getDecemberEnumLiteralDeclaration_11()); 
    }
));



// Rule Comparator
ruleComparator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='inferior' 
	{
        $current = grammarAccess.getComparatorAccess().getInferiorEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getComparatorAccess().getInferiorEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='inferiorOrEqual' 
	{
        $current = grammarAccess.getComparatorAccess().getInferiorOrEqualEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getComparatorAccess().getInferiorOrEqualEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='equal' 
	{
        $current = grammarAccess.getComparatorAccess().getEqualEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getComparatorAccess().getEqualEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='different' 
	{
        $current = grammarAccess.getComparatorAccess().getDifferentEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getComparatorAccess().getDifferentEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='superior' 
	{
        $current = grammarAccess.getComparatorAccess().getSuperiorEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getComparatorAccess().getSuperiorEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='superiorOrEqual' 
	{
        $current = grammarAccess.getComparatorAccess().getSuperiorOrEqualEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getComparatorAccess().getSuperiorOrEqualEnumLiteralDeclaration_5()); 
    }
));



// Rule BinaryExppressionType
ruleBinaryExppressionType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='AND' 
	{
        $current = grammarAccess.getBinaryExppressionTypeAccess().getANDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBinaryExppressionTypeAccess().getANDEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='OR' 
	{
        $current = grammarAccess.getBinaryExppressionTypeAccess().getOREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getBinaryExppressionTypeAccess().getOREnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='XOR' 
	{
        $current = grammarAccess.getBinaryExppressionTypeAccess().getXOREnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getBinaryExppressionTypeAccess().getXOREnumLiteralDeclaration_2()); 
    }
));



// Rule GrainStateEnum
ruleGrainStateEnum returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='MATURE' 
	{
        $current = grammarAccess.getGrainStateEnumAccess().getMATUREEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getGrainStateEnumAccess().getMATUREEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='IMMATURE' 
	{
        $current = grammarAccess.getGrainStateEnumAccess().getIMMATUREEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getGrainStateEnumAccess().getIMMATUREEnumLiteralDeclaration_1()); 
    }
));



// Rule EnumTypeRessource
ruleEnumTypeRessource returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='Worker' 
	{
        $current = grammarAccess.getEnumTypeRessourceAccess().getWorkerEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getEnumTypeRessourceAccess().getWorkerEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='Tractor' 
	{
        $current = grammarAccess.getEnumTypeRessourceAccess().getTractorEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getEnumTypeRessourceAccess().getTractorEnumLiteralDeclaration_1()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;



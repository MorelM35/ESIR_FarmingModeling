/*
* generated by Xtext
*/
grammar InternalAct;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.activity.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.activity.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.activity.services.ActGrammarAccess;

}

@parser::members {

 	private ActGrammarAccess grammarAccess;
 	
    public InternalActParser(TokenStream input, ActGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "PeriodicActivity";	
   	}
   	
   	@Override
   	protected ActGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRulePeriodicActivity
entryRulePeriodicActivity returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPeriodicActivityRule()); }
	 iv_rulePeriodicActivity=rulePeriodicActivity 
	 { $current=$iv_rulePeriodicActivity.current; } 
	 EOF 
;

// Rule PeriodicActivity
rulePeriodicActivity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPeriodicActivityAccess().getPeriodicActivityAction_0(),
            $current);
    }
)	otherlv_1='PeriodicActivity' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPeriodicActivityAccess().getPeriodicActivityKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPeriodicActivityAccess().getNameEStringParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPeriodicActivityRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPeriodicActivityAccess().getLeftCurlyBracketKeyword_3());
    }
(	otherlv_4='atelier' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPeriodicActivityAccess().getAtelierKeyword_4_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPeriodicActivityRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getPeriodicActivityAccess().getAtelierAtelierCrossReference_4_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getPeriodicActivityAccess().getCommaKeyword_4_2());
    }
)?	otherlv_7='start' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getPeriodicActivityAccess().getStartKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPeriodicActivityAccess().getStartDateParserRuleCall_6_0()); 
	    }
		lv_start_8_0=ruleDate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPeriodicActivityRule());
	        }
       		set(
       			$current, 
       			"start",
        		lv_start_8_0, 
        		"Date");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9=',' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getPeriodicActivityAccess().getCommaKeyword_7());
    }
	otherlv_10='end' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getPeriodicActivityAccess().getEndKeyword_8());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPeriodicActivityAccess().getEndDateParserRuleCall_9_0()); 
	    }
		lv_end_11_0=ruleDate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPeriodicActivityRule());
	        }
       		set(
       			$current, 
       			"end",
        		lv_end_11_0, 
        		"Date");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_12=',' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getPeriodicActivityAccess().getCommaKeyword_10());
    }
(	otherlv_13='every' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getPeriodicActivityAccess().getEveryKeyword_11_0());
    }
(	otherlv_14='hour' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getPeriodicActivityAccess().getHourKeyword_11_1_0());
    }

    |	otherlv_15='day' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getPeriodicActivityAccess().getDayKeyword_11_1_1());
    }

    |	otherlv_16='week' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getPeriodicActivityAccess().getWeekKeyword_11_1_2());
    }

    |	otherlv_17='month' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getPeriodicActivityAccess().getMonthKeyword_11_1_3());
    }

    |	otherlv_18='year' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getPeriodicActivityAccess().getYearKeyword_11_1_4());
    }
))?(	otherlv_19='allocate' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getPeriodicActivityAccess().getAllocateKeyword_12_0());
    }
	otherlv_20='{' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getPeriodicActivityAccess().getLeftCurlyBracketKeyword_12_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPeriodicActivityAccess().getResAllocationResAllocationParserRuleCall_12_2_0()); 
	    }
		lv_resAllocation_21_0=ruleResAllocation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPeriodicActivityRule());
	        }
       		add(
       			$current, 
       			"resAllocation",
        		lv_resAllocation_21_0, 
        		"ResAllocation");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_22=',' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getPeriodicActivityAccess().getCommaKeyword_12_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPeriodicActivityAccess().getResAllocationResAllocationParserRuleCall_12_3_1_0()); 
	    }
		lv_resAllocation_23_0=ruleResAllocation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPeriodicActivityRule());
	        }
       		add(
       			$current, 
       			"resAllocation",
        		lv_resAllocation_23_0, 
        		"ResAllocation");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_24='} ,' 
    {
    	newLeafNode(otherlv_24, grammarAccess.getPeriodicActivityAccess().getRightCurlyBracketSpaceCommaKeyword_12_4());
    }
)?(	otherlv_25='rules' 
    {
    	newLeafNode(otherlv_25, grammarAccess.getPeriodicActivityAccess().getRulesKeyword_13_0());
    }
	otherlv_26='{' 
    {
    	newLeafNode(otherlv_26, grammarAccess.getPeriodicActivityAccess().getLeftCurlyBracketKeyword_13_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPeriodicActivityAccess().getRuleRuleParserRuleCall_13_2_0()); 
	    }
		lv_rule_27_0=ruleRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPeriodicActivityRule());
	        }
       		add(
       			$current, 
       			"rule",
        		lv_rule_27_0, 
        		"Rule");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_28=',' 
    {
    	newLeafNode(otherlv_28, grammarAccess.getPeriodicActivityAccess().getCommaKeyword_13_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPeriodicActivityAccess().getRuleRuleParserRuleCall_13_3_1_0()); 
	    }
		lv_rule_29_0=ruleRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPeriodicActivityRule());
	        }
       		add(
       			$current, 
       			"rule",
        		lv_rule_29_0, 
        		"Rule");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_30='}' 
    {
    	newLeafNode(otherlv_30, grammarAccess.getPeriodicActivityAccess().getRightCurlyBracketKeyword_13_4());
    }
)?	otherlv_31='}' 
    {
    	newLeafNode(otherlv_31, grammarAccess.getPeriodicActivityAccess().getRightCurlyBracketKeyword_14());
    }
)
;







// Entry rule entryRuleDate
entryRuleDate returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDateRule()); }
	 iv_ruleDate=ruleDate 
	 { $current=$iv_ruleDate.current; } 
	 EOF 
;

// Rule Date
ruleDate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDateAccess().getDateAction_0(),
            $current);
    }
)	otherlv_1='from' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDateAccess().getFromKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDateAccess().getDayEIntParserRuleCall_2_0()); 
	    }
		lv_day_2_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDateRule());
	        }
       		set(
       			$current, 
       			"day",
        		lv_day_2_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleResAllocation
entryRuleResAllocation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getResAllocationRule()); }
	 iv_ruleResAllocation=ruleResAllocation 
	 { $current=$iv_ruleResAllocation.current; } 
	 EOF 
;

// Rule ResAllocation
ruleResAllocation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getResAllocationAccess().getRessourceAllocationAction_0(),
            $current);
    }
)	otherlv_1='reserve' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getResAllocationAccess().getReserveKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getResAllocationRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getResAllocationAccess().getRessourceRessourceCrossReference_2_0()); 
	}

)
)	otherlv_3='for' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getResAllocationAccess().getForKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getResAllocationAccess().getDureeEIntParserRuleCall_4_0()); 
	    }
		lv_duree_4_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getResAllocationRule());
	        }
       		set(
       			$current, 
       			"duree",
        		lv_duree_4_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	 iv_ruleRule=ruleRule 
	 { $current=$iv_ruleRule.current; } 
	 EOF 
;

// Rule Rule
ruleRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getRuleAccess().getRuleAction_0(),
            $current);
    }
)(	otherlv_1='pre' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRuleAccess().getPreKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleAccess().getPrePredicateParserRuleCall_1_1_0()); 
	    }
		lv_pre_2_0=rulePredicate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleRule());
	        }
       		add(
       			$current, 
       			"pre",
        		lv_pre_2_0, 
        		"Predicate");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAtelier_Impl
entryRuleAtelier_Impl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtelier_ImplRule()); }
	 iv_ruleAtelier_Impl=ruleAtelier_Impl 
	 { $current=$iv_ruleAtelier_Impl.current; } 
	 EOF 
;

// Rule Atelier_Impl
ruleAtelier_Impl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtelier_ImplAccess().getAtelierAction_0(),
            $current);
    }
)	otherlv_1='Atelier' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAtelier_ImplAccess().getAtelierKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAtelier_ImplAccess().getLeftCurlyBracketKeyword_2());
    }
(	otherlv_3='activity' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAtelier_ImplAccess().getActivityKeyword_3_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtelier_ImplRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getAtelier_ImplAccess().getActivityPeriodicActivityCrossReference_3_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAtelier_ImplAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEIntRule()); } 
	 iv_ruleEInt=ruleEInt 
	 { $current=$iv_ruleEInt.current.getText(); }  
	 EOF 
;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;







// Entry rule entryRulePredicate
entryRulePredicate returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPredicateRule()); }
	 iv_rulePredicate=rulePredicate 
	 { $current=$iv_rulePredicate.current; } 
	 EOF 
;

// Rule Predicate
rulePredicate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getPredicateAccess().getPredicatAction(),
            $current);
    }
)
;





// Entry rule entryRuleElevage
entryRuleElevage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElevageRule()); }
	 iv_ruleElevage=ruleElevage 
	 { $current=$iv_ruleElevage.current; } 
	 EOF 
;

// Rule Elevage
ruleElevage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getElevageAccess().getElevageAction_0(),
            $current);
    }
)	otherlv_1='Elevage' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getElevageAccess().getElevageKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getElevageAccess().getLeftCurlyBracketKeyword_2());
    }
(	otherlv_3='activity' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getElevageAccess().getActivityKeyword_3_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getElevageRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getElevageAccess().getActivityPeriodicActivityCrossReference_3_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getElevageAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleCulture
entryRuleCulture returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCultureRule()); }
	 iv_ruleCulture=ruleCulture 
	 { $current=$iv_ruleCulture.current; } 
	 EOF 
;

// Rule Culture
ruleCulture returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getCultureAccess().getCultureAction_0(),
            $current);
    }
)	otherlv_1='Culture' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCultureAccess().getCultureKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCultureAccess().getLeftCurlyBracketKeyword_2());
    }
(	otherlv_3='activity' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCultureAccess().getActivityKeyword_3_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getCultureRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getCultureAccess().getActivityPeriodicActivityCrossReference_3_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getCultureAccess().getRightCurlyBracketKeyword_4());
    }
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;



/**
 */
package exploitation.impl;

import exploitation.ExploitationPackage;
import exploitation.Parcelle;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Parcelle</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link exploitation.impl.ParcelleImpl#isIrrigue <em>Irrigue</em>}</li>
 *   <li>{@link exploitation.impl.ParcelleImpl#getHectar <em>Hectar</em>}</li>
 *   <li>{@link exploitation.impl.ParcelleImpl#getId <em>Id</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class ParcelleImpl extends MinimalEObjectImpl.Container implements Parcelle {
	/**
	 * The default value of the '{@link #isIrrigue() <em>Irrigue</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isIrrigue()
	 * @generated
	 * @ordered
	 */
	protected static final boolean IRRIGUE_EDEFAULT = false;

	/**
	 * The cached value of the '{@link #isIrrigue() <em>Irrigue</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isIrrigue()
	 * @generated
	 * @ordered
	 */
	protected boolean irrigue = IRRIGUE_EDEFAULT;

	/**
	 * The default value of the '{@link #getHectar() <em>Hectar</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getHectar()
	 * @generated
	 * @ordered
	 */
	protected static final int HECTAR_EDEFAULT = 0;

	/**
	 * The cached value of the '{@link #getHectar() <em>Hectar</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getHectar()
	 * @generated
	 * @ordered
	 */
	protected int hectar = HECTAR_EDEFAULT;

	/**
	 * The default value of the '{@link #getId() <em>Id</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getId()
	 * @generated
	 * @ordered
	 */
	protected static final int ID_EDEFAULT = 0;

	/**
	 * The cached value of the '{@link #getId() <em>Id</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getId()
	 * @generated
	 * @ordered
	 */
	protected int id = ID_EDEFAULT;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParcelleImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return ExploitationPackage.Literals.PARCELLE;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isIrrigue() {
		return irrigue;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setIrrigue(boolean newIrrigue) {
		boolean oldIrrigue = irrigue;
		irrigue = newIrrigue;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, ExploitationPackage.PARCELLE__IRRIGUE, oldIrrigue, irrigue));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getHectar() {
		return hectar;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setHectar(int newHectar) {
		int oldHectar = hectar;
		hectar = newHectar;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, ExploitationPackage.PARCELLE__HECTAR, oldHectar, hectar));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getId() {
		return id;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setId(int newId) {
		int oldId = id;
		id = newId;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, ExploitationPackage.PARCELLE__ID, oldId, id));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case ExploitationPackage.PARCELLE__IRRIGUE:
				return isIrrigue();
			case ExploitationPackage.PARCELLE__HECTAR:
				return getHectar();
			case ExploitationPackage.PARCELLE__ID:
				return getId();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case ExploitationPackage.PARCELLE__IRRIGUE:
				setIrrigue((Boolean)newValue);
				return;
			case ExploitationPackage.PARCELLE__HECTAR:
				setHectar((Integer)newValue);
				return;
			case ExploitationPackage.PARCELLE__ID:
				setId((Integer)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case ExploitationPackage.PARCELLE__IRRIGUE:
				setIrrigue(IRRIGUE_EDEFAULT);
				return;
			case ExploitationPackage.PARCELLE__HECTAR:
				setHectar(HECTAR_EDEFAULT);
				return;
			case ExploitationPackage.PARCELLE__ID:
				setId(ID_EDEFAULT);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case ExploitationPackage.PARCELLE__IRRIGUE:
				return irrigue != IRRIGUE_EDEFAULT;
			case ExploitationPackage.PARCELLE__HECTAR:
				return hectar != HECTAR_EDEFAULT;
			case ExploitationPackage.PARCELLE__ID:
				return id != ID_EDEFAULT;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (irrigue: ");
		result.append(irrigue);
		result.append(", hectar: ");
		result.append(hectar);
		result.append(", id: ");
		result.append(id);
		result.append(')');
		return result.toString();
	}

} //ParcelleImpl

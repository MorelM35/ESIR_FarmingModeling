/**
 */
package exploitation.impl;

import exploitation.Exploitation;
import exploitation.ExploitationPackage;
import exploitation.Ressource;
import exploitation.RessourceType;
import exploitation.Surface;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Exploitation</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link exploitation.impl.ExploitationImpl#getName <em>Name</em>}</li>
 *   <li>{@link exploitation.impl.ExploitationImpl#getRessource <em>Ressource</em>}</li>
 *   <li>{@link exploitation.impl.ExploitationImpl#getRessourceType <em>Ressource Type</em>}</li>
 *   <li>{@link exploitation.impl.ExploitationImpl#getSurface <em>Surface</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class ExploitationImpl extends MinimalEObjectImpl.Container implements Exploitation {
	/**
	 * The default value of the '{@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getName()
	 * @generated
	 * @ordered
	 */
	protected static final String NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getName()
	 * @generated
	 * @ordered
	 */
	protected String name = NAME_EDEFAULT;

	/**
	 * The cached value of the '{@link #getRessource() <em>Ressource</em>}' reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getRessource()
	 * @generated
	 * @ordered
	 */
	protected EList<Ressource> ressource;

	/**
	 * The cached value of the '{@link #getRessourceType() <em>Ressource Type</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getRessourceType()
	 * @generated
	 * @ordered
	 */
	protected EList<RessourceType> ressourceType;

	/**
	 * The cached value of the '{@link #getSurface() <em>Surface</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getSurface()
	 * @generated
	 * @ordered
	 */
	protected EList<Surface> surface;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExploitationImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return ExploitationPackage.Literals.EXPLOITATION;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String getName() {
		return name;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setName(String newName) {
		String oldName = name;
		name = newName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, ExploitationPackage.EXPLOITATION__NAME, oldName, name));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<Ressource> getRessource() {
		if (ressource == null) {
			ressource = new EObjectResolvingEList<Ressource>(Ressource.class, this, ExploitationPackage.EXPLOITATION__RESSOURCE);
		}
		return ressource;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<RessourceType> getRessourceType() {
		if (ressourceType == null) {
			ressourceType = new EObjectContainmentEList<RessourceType>(RessourceType.class, this, ExploitationPackage.EXPLOITATION__RESSOURCE_TYPE);
		}
		return ressourceType;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<Surface> getSurface() {
		if (surface == null) {
			surface = new EObjectContainmentEList<Surface>(Surface.class, this, ExploitationPackage.EXPLOITATION__SURFACE);
		}
		return surface;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case ExploitationPackage.EXPLOITATION__RESSOURCE_TYPE:
				return ((InternalEList<?>)getRessourceType()).basicRemove(otherEnd, msgs);
			case ExploitationPackage.EXPLOITATION__SURFACE:
				return ((InternalEList<?>)getSurface()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case ExploitationPackage.EXPLOITATION__NAME:
				return getName();
			case ExploitationPackage.EXPLOITATION__RESSOURCE:
				return getRessource();
			case ExploitationPackage.EXPLOITATION__RESSOURCE_TYPE:
				return getRessourceType();
			case ExploitationPackage.EXPLOITATION__SURFACE:
				return getSurface();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case ExploitationPackage.EXPLOITATION__NAME:
				setName((String)newValue);
				return;
			case ExploitationPackage.EXPLOITATION__RESSOURCE:
				getRessource().clear();
				getRessource().addAll((Collection<? extends Ressource>)newValue);
				return;
			case ExploitationPackage.EXPLOITATION__RESSOURCE_TYPE:
				getRessourceType().clear();
				getRessourceType().addAll((Collection<? extends RessourceType>)newValue);
				return;
			case ExploitationPackage.EXPLOITATION__SURFACE:
				getSurface().clear();
				getSurface().addAll((Collection<? extends Surface>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case ExploitationPackage.EXPLOITATION__NAME:
				setName(NAME_EDEFAULT);
				return;
			case ExploitationPackage.EXPLOITATION__RESSOURCE:
				getRessource().clear();
				return;
			case ExploitationPackage.EXPLOITATION__RESSOURCE_TYPE:
				getRessourceType().clear();
				return;
			case ExploitationPackage.EXPLOITATION__SURFACE:
				getSurface().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case ExploitationPackage.EXPLOITATION__NAME:
				return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
			case ExploitationPackage.EXPLOITATION__RESSOURCE:
				return ressource != null && !ressource.isEmpty();
			case ExploitationPackage.EXPLOITATION__RESSOURCE_TYPE:
				return ressourceType != null && !ressourceType.isEmpty();
			case ExploitationPackage.EXPLOITATION__SURFACE:
				return surface != null && !surface.isEmpty();
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (name: ");
		result.append(name);
		result.append(')');
		return result.toString();
	}

} //ExploitationImpl

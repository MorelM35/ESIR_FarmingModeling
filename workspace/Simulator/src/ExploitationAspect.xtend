import exploitation.Exploitation
import exploitation.Parcelle
import exploitation.Surface
import exploitation.impl.ExploitationFactoryImpl
import fr.inria.diverse.k3.al.annotationprocessor.Aspect
import java.util.Date

class Main {
	def static void main(String[] args) {
		val factory = ExploitationFactoryImpl.init();
		println("coucou")
		val exploitation = factory.createExploitation
		val s1 = factory.createSurface

		val s2 = factory.createSurface
		val s3 = factory.createSurface

		val listOFSurface = exploitation.surface
		listOFSurface.add(s1)
		listOFSurface.add(s2)
		listOFSurface.add(s3)
		ExploitationAspect.compile(exploitation)
	}
}

@Aspect(className=Exploitation)
class ExploitationAspect {

	def simulate(int qtyWater, Date begin, Date end) {
	}

	def void compile() {
		val dump = '''---Exploitation---
		«FOR s : _self.surface»
		«SurfaceAspect.compile(s)»
		«ENDFOR»		
		'''
		println(dump)
	}

}

@Aspect(className=Surface)
class SurfaceAspect {

	def simulate() {
	}

	def compile() {
		'''---Surface---
		---Parcelles---
		«FOR p : _self.parcelle»»»
		«ParcelleAspect.compile(p)»
		«ENDFOR»»
		'''
	}

}

@Aspect(className=Parcelle)
class ParcelleAspect {

	def simulate() {
	}

	def compile() {
		'''ID :«_self.id», surface :«_self.hectar»Ha, «IF _self.irrigue»irrigué«ELSE»"NON irrigué"«ENDIF»'''
		
	}
		
}

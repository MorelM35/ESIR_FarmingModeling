import exploitation.impl.ExploitationFactoryImpl
import fr.inria.diverse.k3.al.annotationprocessor.Aspect
import static extension ExploitationAspect.*
import static extension SurfaceAspect.*
import static extension ParcelleAspect.*
import static extension RessourceAspect.*
import static extension RessourceAllocationAspect.*
import static extension RessourceTypeAspect.*
import static extension PeriodicActivityAspect.*
import static extension RuleAspect.*
import static extension AtelierAspect.*
import static extension AtelierRefAspect.*
import static extension DateAspect.*
import exploitation.*
import activity.*
import fr.inria.diverse.k3.al.annotationprocessor.OverrideAspectMethod
import java.io.PrintWriter
import java.util.Calendar
import java.util.List

/************************************************************
 * 							EXPLOITATION
 ************************************************************/
@Aspect(className=Exploitation) 
class ExploitationAspect {

	def void simulate(int qtyWater, java.util.Date begin, java.util.Date end) {
	}

	def void compile() {
		var out = new PrintWriter("compile.html");
		val dump = '''
		<!DOCTYPE HTML>
		<html>
			<head>
				<title>Farming Modeling</title>
				<meta http-equiv="content-type" content="text/html; charset=utf-8" />
				<link rel="stylesheet" type="text/css" href="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css">
			</head>
			<body>			
			<h1>Exploitation <i>«_self.name»</i></h1>
			<ol>
				«FOR s : _self.surface»
				<li>«s.compile()»</li>
				«ENDFOR»
			</ol>
			<h2>Resources</h2>
			<ol>				
				«FOR s : _self.ressource»
				<li>«s.compile()»</li>
				«ENDFOR»
			</ol>
		</body>
		</html>
		'''
		out.println(dump)
		out.close()
	}

}

@Aspect(className=Surface)
class SurfaceAspect {

	def void simulate() {
	}

	def String compile() {
		'''
		<h3>Surface</h3>
		<h4>Plot</h4>
		<ol>
			«FOR p : _self.parcelle»
			<li>«p.compile()»</li>
			«ENDFOR»
		</ol>
		<h4>Workshop</h4>
		«_self.atelier.compile»
		'''
	}

}

@Aspect(className=Parcelle)
class ParcelleAspect {

	def void simulate() {
	}

	def String compile() {
		'''
		<ul>
			<li>ID : «_self.id»</li>
			<li>surface : «_self.hectar»<strong>Ha</strong></li>
			<li><strong>«IF _self.irrigue»irrigated«ELSE»unirrigated«ENDIF»</strong></li>
		</ul><br>'''
	}
		
}


@Aspect(className=Date)
class DateAspect {

	def void  simulate() {
		
	}

	def String compile() {
		'''<strong>«_self.day» «_self.month» «_self.year»</strong>'''
	}	
	
	def Integer compareTo(Date otherDate){
		_self.toJavaDate.compareTo(otherDate.toJavaDate)
	}
	
	def java.util.Date toJavaDate(){
		var calendar = _self.toJavaCalendar
		calendar.getTime();
	}
	
	def java.util.Calendar toJavaCalendar(){
		var calendar = Calendar.getInstance();
		calendar.clear();
		calendar.set(Calendar.DAY_OF_MONTH, _self.day);
		calendar.set(Calendar.MONTH, _self.month.ordinal);
		calendar.set(Calendar.YEAR, _self.year);
		calendar
	}
	
}

/************************************************************
 * 							ACTIVITY
 ************************************************************/

@Aspect(className=Model)
class ModelAspect {
	
	def getAtelierList(){
		val list = <String,List<PeriodicActivity>>newHashMap()
		for(a:_self.atelier){
			list.put(a.id,a.activity)
		}
		return list
	}

	def void  simulate() {
	}

	def String compile() {
		'''
		«FOR a : _self.atelier»
		«a.compile()»
		«ENDFOR»
		'''
	}	
}

@Aspect(className=AtelierRef)
class AtelierRefAspect {

	def getActivitiList(){
		return _self.activity
	}
	
	def void  simulate() {
	}

	def String compile() {
		'''--Activities--
		«FOR a : _self.activity»
		<li>«a.compile()»</li>
		«ENDFOR»
		</ol>
		'''
	}	
}


@Aspect(className=PeriodicActivity)
class PeriodicActivityAspect {

	def String compile() {
		'''<i>«_self.name»</i>
		<ul>
			<li>from «DateAspect.compile(_self.start)» to «DateAspect.compile(_self.end)»</li>
			<li>every «_self.frequency» «_self.periodicityType»</li>
			<li>Rules :
				<ol>
				«FOR r : _self.rule»
				<li>«r.compile»</li>
				«ENDFOR»
				</ol>
			</li>
		</ul><br>'''
	}	
}

/************************************************************
 * 							RESSOURCES
 ************************************************************/
@Aspect(className=Ressource)
class RessourceAspect {

	def void  simulate() {
	}

	def String compile() {
		'''<h4>«_self.name»(<i>«_self.type.compile()»</i>)</h4>
		<ol>
		«FOR ra : _self.resAllocation»
		<li>«ra.compile()»</li>
		«ENDFOR»
		</ol>
		'''		
	}	
}

@Aspect(className=RessourceType)
class RessourceTypeAspect {

	def void  simulate() {
	}

	def String compile() {
		'''«_self.name»'''
	}	
}

@Aspect(className=RessourceAllocation)
class RessourceAllocationAspect {

	def void  simulate() {
	}

	def String compile() {
		'''«_self.ressourceType» during : «_self.duration» «_self.periodicityType»'''
	}	
}

/************************************************************
 * 							RULES
 ************************************************************/
@Aspect(className=Rule)
abstract class RuleAspect {
	def Boolean simulate(Date start, List<String> errors);
	def String compile();
}

@Aspect(className=Predicat)
abstract class PredicatAspect extends RuleAspect {
	def Boolean simulate(Date start, List<String> errors);
	def String compile();
}

@Aspect(className=CheckBeforeDate)
class CheckBeforeDateAspect extends PredicatAspect{
	
	@OverrideAspectMethod
	def Boolean simulate(Date start, List<String> errors) {
		start.compareTo(_self.date) == -1
	}
	
	@OverrideAspectMethod
	def String compile() {
		'''date : «DateAspect.compile(_self.date)»'''
	}	
}

@Aspect(className=CheckDoneActivity)
class CheckDoneActivityAspect extends PredicatAspect{
	
	@OverrideAspectMethod
	def Boolean simulate(Date start, List<String> errors) {
		start.compareTo(_self.activityToValidate.end) == -1
	}
	
	@OverrideAspectMethod
	def String compile() {
		'''activity «_self.activityToValidate.name» should be done'''
	}
	
}

@Aspect(className=NoRain)
class NoRainAspect extends PredicatAspect{
	@OverrideAspectMethod
	def Boolean simulate(Date start, List<String> errors) {
		var dateTemp = start.toJavaCalendar
		var datePast = start.toJavaCalendar
		
		if(_self.periodicityType == periodicity.HOURS){
			datePast.roll(Calendar.HOUR, false)
		}else if(_self.periodicityType == periodicity.DAYS){
			datePast.roll(Calendar.MONTH, false)
		}else if(_self.periodicityType == periodicity.WEEKS){
			datePast.roll(Calendar.WEEK_OF_MONTH, false)
		}else if(_self.periodicityType == periodicity.MONTHS){
			datePast.roll(Calendar.MONTH, false)
		}else{ //YEAR
			datePast.roll(Calendar.YEAR, false)
		}
		
		/*while(dateTemp.getTime.compareTo(datePast.getTime) == 1){
			dateTemp.roll(Calendar.DAY_OF_MONTH, false)
			if(Calculator.series.get(dateTemp.getTime).RR > 1)
				errors.add("Rain error")
				return false
		}	*/	
		
		true
	}

    @OverrideAspectMethod
	def String compile() {
		'''No rain during «_self.elapsedTime» «_self.periodicityType»'''
	}	
}

@Aspect(className=GrainState)
class GrainStateAspect extends PredicatAspect {
	@OverrideAspectMethod
	def simulate(Date start, List<String> errors) {
		true
	}

	@OverrideAspectMethod
	def String compile() {
		'''=grain state maturation : «_self.state»'''
	}	
}

@Aspect(className=BinaryExpression)
class BinaryExpressionAspect extends RuleAspect {

	@OverrideAspectMethod
	def Boolean simulate(Date start, List<String> errors) {
		if(_self.ope == BinaryExpressionType.AND){
			_self.left.simulate(start, errors) && _self.right.simulate(start, errors)
		}else if(_self.ope == BinaryExpressionType.OR){ //OR
			_self.left.simulate(start, errors) || _self.right.simulate(start, errors)
		}else{ //XOR
			_self.left.simulate(start, errors) != _self.right.simulate(start, errors)
		}
	}

	@OverrideAspectMethod
	def String compile() {
		'''(«_self.left.compile()» «IF _self.ope!=null» «_self.ope» «_self.right.compile()»«ENDIF» )'''
	}
}

/************************************************************
 * 							WEATHER
 ************************************************************/

@Aspect(className=Weather)
abstract class WeatherAspect extends PredicatAspect {
	@OverrideAspectMethod
	def Boolean simulate(Date start, List<String> errors);

	@OverrideAspectMethod
	def String compile(){''''''}
	
	def Boolean compare(float value1, float value2){
		if(_self.comparator == ComparatorType.INFERIOR){
			value1 < value2
		}else if(_self.comparator == ComparatorType.INFERIOR_OR_EQUAL){
			value1 <= value2
		}else if(_self.comparator == ComparatorType.EQUAL){
			value1 == value2
		}else if(_self.comparator ==  ComparatorType.DIFFERENT){
			value1 != value2
		}else if(_self.comparator ==  ComparatorType.SUPERIOR_OR_EQUAL){
			value1 >= value2
		}else{ //SUPERIOR
			value1 > value2
		}
	}
}

@Aspect(className=Rayonnement)
class RayonnementAspect extends WeatherAspect{
	@OverrideAspectMethod
	def simulate(Date start, List<String> errors) {
		var valueMeteo = Calculator.series.get(start.toJavaDate).PAR
		if(_self.compare(valueMeteo,_self.value)){
			true
		}else{
			errors.add("radiance error")
			false
		}
	}

	@OverrideAspectMethod
	def String compile() {
		'''radiance : «_self.value» lux'''
	}	
}

@Aspect(className=EvapoTranspiration)
class EvapoTranspirationAspect extends WeatherAspect {
	@OverrideAspectMethod
	def simulate(Date start, List<String> errors) {
		var valueMeteo = Calculator.series.get(start.toJavaDate).ETP
		if(_self.compare(valueMeteo,_self.value)){
			true
		}else{
			errors.add("EvapoTranspiration error")
			false
		}
	}

	@OverrideAspectMethod
	def String compile() {
		'''«_self.value»'''
	}	
}

@Aspect(className=Precipitation)
class PrecipitationAspect extends WeatherAspect{
	@OverrideAspectMethod
	def simulate(Date start, List<String> errors) {
		var valueMeteo = Calculator.series.get(start.toJavaDate).RR
		if(_self.compare(valueMeteo,_self.height)){
			true
		}else{
			errors.add("Precipitation error")
			false
		}
	}

	@OverrideAspectMethod
	def String compile() {
		'''«_self.height» millimeter of water'''
	}	
}


@Aspect(className=Temperature)
class TemperatureAspect extends WeatherAspect {
	@OverrideAspectMethod
	def simulate(Date start, List<String> errors) {
		var valueMeteo = Calculator.series.get(start.toJavaDate).TM
		if(_self.compare(valueMeteo,_self.value)){
			true
		}else{
			errors.add("Temperature error: "+_self.value+" is "+_self.comparator+" than "+valueMeteo)
			false
		}
	}

	@OverrideAspectMethod
	def String compile() {
		'''«_self.value» °C'''
	}	
}

/************************************************************
 * 							ATELIERS
 ************************************************************/
@Aspect(className=Atelier)
abstract class AtelierAspect {
	def String compile(){
		''' <i>«_self.id»</i></h4>
		<h5>Periodic activities</h5>
		<ol>
		«FOR s :_self.activity»
		<li>«s.compile()»</li>
		«ENDFOR»
		</ol>'''
	}
}
 
 @Aspect(className=Ble)
class BleAspect extends CultureAspect {

	def void  simulate() {
	}

	@OverrideAspectMethod
	def String compile() {
		'''<h4>blé
		«_self.super_compile»'''
	}	
}

@Aspect(className=Bovin)
class BovinAspect extends ElevageAspect{

	def void  simulate() {
	}

	@OverrideAspectMethod
	def String compile() {
		'''<h4>bovin
		«_self.super_compile»'''
	}	
}

@Aspect(className=Culture)
abstract class CultureAspect extends AtelierAspect {

	def void  simulate() {
	}

	@OverrideAspectMethod
	def String compile() {
		'''(culture) «_self.super_compile»'''
	}	
}

@Aspect(className=Elevage)
abstract class ElevageAspect extends AtelierAspect {

	def void  simulate() {
	}

	@OverrideAspectMethod
	def String compile() {
		'''(elevage) «_self.super_compile»'''
	}	
}

@Aspect(className=Mais)
class MaisAspect extends CultureAspect{

	def void  simulate() {
	}

	@OverrideAspectMethod
	def String compile() {
		'''<h4>maïs
		«_self.super_compile»'''
	}	
}

@Aspect(className=Ovin)
class OvinAspect extends ElevageAspect{

	def void  simulate() {
	}

	@OverrideAspectMethod
	def String compile() {
		'''<h4>ovin
		«_self.super_compile»'''
	}	
}

@Aspect(className=Sorgho)
class SorghoAspect extends CultureAspect{

	def void  simulate() {
	}

	@OverrideAspectMethod
	def String compile() {
		'''<h4>sorgho
		«_self.super_compile»'''
	}	
}
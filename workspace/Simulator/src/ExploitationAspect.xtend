import exploitation.impl.ExploitationFactoryImpl
import fr.inria.diverse.k3.al.annotationprocessor.Aspect
import java.util.Date
import static extension ExploitationAspect.*
import static extension SurfaceAspect.*
import static extension ParcelleAspect.*
import static extension RessourceAspect.*
import static extension RessourceAllocationAspect.*
import static extension RessourceTypeAspect.*
import static extension PeriodicActivityAspect.*
import static extension RuleAspect.*
import static extension AtelierAspect.*
import exploitation.*
import activity.*

@Aspect(className=Exploitation)
class ExploitationAspect {

	def simulate(int qtyWater, Date begin, Date end) {
	}

	def void compile() {
		val dump = '''---Exploitation «_self.name» ---
		«FOR s : _self.surface»
		«s.compile»
		«ENDFOR»
		«FOR s : _self.ressource»
		«s.compile»
		«ENDFOR»
		'''
		println(dump)
	}

}

@Aspect(className=Surface)
class SurfaceAspect {

	def simulate() {
	}

	def compile() {
		'''---Surface---
		---Parcelles---
		«FOR p : _self.parcelle»
		«p.compile»
		«ENDFOR» 
		---Atelier---
		«_self.atelier»
		'''
	}

}

@Aspect(className=Parcelle)
class ParcelleAspect {

	def simulate() {
	}

	def compile() {
		'''ID :«_self.id», surface :«_self.hectar»Ha, «IF _self.irrigue»irrigué«ELSE»"NON irrigué"«ENDIF»'''		
	}		
}

@Aspect(className=activity.Date)
class DateAspect {

	def simulate() {
	}

	def compile() {
		'''«_self.day»/«_self.month»/«_self.year»'''
	}	
}


@Aspect(className=Model)
class ModelAspect {

	def simulate() {
	}

	def compile() {
		'''Modèle «_self.name»
		«FOR a : _self.activity»
		«a.compile»
		«ENDFOR»
		'''
	}	
}

@Aspect(className=PeriodicActivity)
class PeriodicActivityAspect {

	def simulate() {
	}

	def compile() {
		'''
		---«_self.name»---
		from «_self.start» to «_self.end» 
		every «_self.frequency»
		«FOR r : _self.rule»
		«r.compile(r)»
		«ENDFOR»
		'''
	}	
}

/************************************************************
 * 							RESSOURCES
 ************************************************************/
@Aspect(className=Ressource)
class RessourceAspect {

	def simulate() {
	}

	def compile() {
		'''---Ressource---
		«_self.name»(«RessourceTypeAspect.compile(_self.type)») :
		«FOR ra : _self.resAllocation»
		«ra.compile»
		«ENDFOR»
		'''		
	}	
}

@Aspect(className=RessourceType)
class RessourceTypeAspect {

	def simulate() {
	}

	def compile() {
		'''«_self.name»'''
	}	
}

@Aspect(className=RessourceAllocation)
class RessourceAllocationAspect {

	def simulate() {
	}

	def compile() {
		'''durée :«_self.duration» «_self.periodicityType»'''
	}	
}

/************************************************************
 * 							RULES
 ************************************************************/
@Aspect(className=Rule)
class RuleAspect {
	def compile(Rule e) {
		'''Ressource'''
	}
}


@Aspect(className=Predicat)
class PredicatAspect extends RuleAspect  {

	def simulate() {
	}

	def compile() {
		'''before «_self.date.day» '''
	}	
}

@Aspect(className=NoRain)
class NoRainAspect extends PredicatAspect {

	def simulate() {
	}

	def compile() {
		'''Pas de pluie pendant «_self.elapsedTime» «_self.periodicityType»'''
	}	
}

@Aspect(className=GrainState)
class GrainStateAspect extends PredicatAspect{

	def simulate() {
	}

	def compile() {
		'''état de maturation du grain :«_self.state»'''
	}	
}

/************************************************************
 * 							WEATHER
 ************************************************************/
 
 @Aspect(className=Precipitation)
class PrecipitationAspect extends PredicatAspect {

	def simulate() {
	}

	def compile() {
		'''«_self.height» millimètre d'eau'''
	}	
}

@Aspect(className=EvapoTranspiration)
class EvapoTranspirationAspect extends PredicatAspect{

	def simulate() {
	}

	def compile() {
		'''«_self.value»'''
	}	
}

/************************************************************
 * 							ATELIERS
 ************************************************************/
 
@Aspect(className=Atelier)
class AtelierAspect {
	def compile(Atelier a){
		
	}
}
 
@Aspect(className=Ble)
class BleAspect extends AtelierAspect{

	def simulate() {
	}

	def compile() {
		'''blé'''
	}	
}

@Aspect(className=Bovin)
class BovinAspect {

	def simulate() {
	}

	def compile() {
		'''bovin'''
	}	
}

@Aspect(className=Culture)
class CultureAspect {

	def simulate() {
	}

	def compile() {
		'''culture'''
	}	
}

@Aspect(className=Elevage)
class ElevageAspect {

	def simulate() {
	}

	def compile() {
		'''elevage'''
	}	
}

@Aspect(className=Mais)
class MaisAspect {

	def simulate() {
	}

	def compile() {
		'''mais'''
	}	
}

@Aspect(className=Ovin)
class OvinAspect {

	def simulate() {
	}

	def compile() {
		'''ovin'''
	}	
}

@Aspect(className=Sorgho)
class SorghoAspect {

	def simulate() {
	}

	def compile() {
		'''sorgho'''
	}	
}
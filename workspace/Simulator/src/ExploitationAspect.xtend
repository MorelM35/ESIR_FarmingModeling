
import fr.inria.diverse.k3.al.annotationprocessor.Aspect
	
import exploitation.Exploitation	
import static extension ExploitationAspect.*
import exploitation.Surface
import exploitation.impl.ExploitationImpl
import exploitation.impl.ExploitationFactoryImpl
import exploitation.impl.SurfaceImpl
import java.util.List

class Main {
	def static void main(String[] args) {
		val factory = ExploitationFactoryImpl.init();
		println("coucou")
		val exploitation = factory.createExploitation
		val s1 = factory.createSurface
		
		val s2 = factory.createSurface
		val s3 = factory.createSurface
		
		val listOFSurface = exploitation.surface
		listOFSurface.add(s1)
		listOFSurface.add(s2)
		listOFSurface.add(s3)
		ExploitationAspect.compile(exploitation)
	}
}


@Aspect(className=Exploitation)
class ExploitationAspect {
	
	def simulate (){
		
	}
	
	def void compile(){
				
		val s = "GO";
		 s.concat("Exploitation : ");
		println(s)
		val list = _self.surface;
		for(Surface x : list){
			val temp = SurfaceAspect.compile(x)
			println(temp)
			s.concat(temp);
		}
		println(s)
	}
}

@Aspect(className=Surface)
class SurfaceAspect {
	
	def simulate (){
		
	}
	
	def compile(){
		return "toto";
	}
}
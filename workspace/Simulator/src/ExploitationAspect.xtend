import exploitation.impl.ExploitationFactoryImpl
import fr.inria.diverse.k3.al.annotationprocessor.Aspect
import static extension ExploitationAspect.*
import static extension SurfaceAspect.*
import static extension ParcelleAspect.*
import static extension RessourceAspect.*
import static extension RessourceAllocationAspect.*
import static extension RessourceTypeAspect.*
import static extension PeriodicActivityAspect.*
import static extension RuleAspect.*
import static extension AtelierAspect.*
import exploitation.*
import activity.*
import fr.inria.diverse.k3.al.annotationprocessor.OverrideAspectMethod

@Aspect(className=Exploitation) 
class ExploitationAspect {

	def simulate(int qtyWater, java.util.Date begin, java.util.Date end) {
	}

	def void compile() {
		val dump = '''---Exploitation---
		«FOR s : _self.surface»
		«s.compile()»
		«ENDFOR»
		'''
		println(dump)
	}

}

@Aspect(className=Surface)
class SurfaceAspect {

	def simulate() {
	}

	def compile() {
		'''---Surface---
		---Parcelles---
		«FOR p : _self.parcelle»
		«p.compile()»
		«ENDFOR»
		--Atelier--
		«_self.atelier.compile»
		'''
	}

}

@Aspect(className=Parcelle)
class ParcelleAspect {

	def simulate() {
	}

	def compile() {
		'''ID :«_self.id», surface :«_self.hectar»Ha, «IF _self.irrigue»irrigué«ELSE»"NON irrigué"«ENDIF»'''
		
	}
		
}


@Aspect(className=Date)
class DateAspect {

	def simulate() {
	}

	def compile() {
		'''«_self.day»/«_self.month»/«_self.year»'''
	}	
}


@Aspect(className=Model)
class ModelAspect {

	def simulate() {
	}

	def compile() {
		'''Modèle «_self.name»
		«FOR a : _self.activity»
		«a.compile()»
		«ENDFOR»
		'''
	}	
}


@Aspect(className=PeriodicActivity)
class PeriodicActivityAspect {

	def simulate() {
	}

	def compile() {
		'''
		---«_self.name»---
		from «_self.start» to «_self.end» 
		every «_self.frequency»
		rules :
		«FOR r : _self.rule»
		«r.compile()»
		«ENDFOR»
		'''
	}	
}

/************************************************************
 * 							RESSOURCES
 ************************************************************/
@Aspect(className=Ressource)
class RessourceAspect {

	def simulate() {
	}

	def compile() {
		'''«_self.name»(«_self.type.compile()») :
		«FOR ra : _self.resAllocation»
		«ra.compile()»
		«ENDFOR»
		'''		
	}	
}

@Aspect(className=RessourceType)
class RessourceTypeAspect {

	def simulate() {
	}

	def compile() {
		'''«_self.name»'''
	}	
}

@Aspect(className=RessourceAllocation)
class RessourceAllocationAspect {

	def simulate() {
	}

	def compile() {
		'''durée :«_self.duration» «_self.periodicityType»'''
	}	
}

/************************************************************
 * 							RULES
 ************************************************************/

@Aspect(className=Predicat)
class PredicatAspect {

	def simulate() {
	}

	def compile() {
		'''date :«DateAspect.compile(_self.date)»'''
	}	
}

@Aspect(className=NoRain)
class NoRainAspect {

	def simulate() {
	}

	def compile() {
		'''Pas de pluie pendant «_self.elapsedTime» «_self.periodicityType»'''
	}	
}


@Aspect(className=EvapoTranspiration)
class EvapoTranspirationAspect {

	def simulate() {
	}

	def compile() {
		'''«_self.value»'''
	}	
}

@Aspect(className=GrainState)
class GrainStateAspect {

	def simulate() {
	}

	def compile() {
		'''état de maturation du grain :«_self.state»'''
	}	
}

@Aspect(className=BinaryExpression)
class BinaryExpressionAspect {

	def simulate() {
	}

	def compile() {
		'''(«_self.left.compile()» «_self.ope» «_self.right.compile()»)'''
	}
}

/************************************************************
 * 							WEATHER
 ************************************************************/

@Aspect(className=Rayonnement)
class RayonnementAspect {

	def simulate() {
	}

	def compile() {
		'''rayonnement :«_self.value» lux'''
	}	
}


@Aspect(className=Precipitation)
class PrecipitationAspect {

	def simulate() {
	}

	def compile() {
		'''«_self.height» millimètre d'eau'''
	}	
}


@Aspect(className=Temperature)
class TemperatureAspect {

	def simulate() {
	}

	def compile() {
		'''«_self.value» °C'''
	}	
}


@Aspect(className=Weather)
class WeatherAspect {

	def simulate() {
	}

	def compile() {
		'''«_self.comparator»'''
	}	
}

/************************************************************
 * 							ATELIERS
 ************************************************************/
@Aspect(className=Atelier)
abstract class AtelierAspect {
	def String compile() ;
}
 
 @Aspect(className=Ble)
class BleAspect extends AtelierAspect {

	def simulate() {
	}

	@OverrideAspectMethod
	def String compile() {
		'''blé'''
	}	
}

@Aspect(className=Bovin)
class BovinAspect extends AtelierAspect{

	def simulate() {
	}

	@OverrideAspectMethod
	def String compile() {
		'''bovin'''
	}	
}

@Aspect(className=Culture)
class CultureAspect extends AtelierAspect {

	def simulate() {
	}

	@OverrideAspectMethod
	def String compile() {
		'''culture'''
	}	
}

@Aspect(className=Elevage)
class ElevageAspect extends AtelierAspect {

	def simulate() {
	}

	@OverrideAspectMethod
	def String compile() {
		'''elevage'''
	}	
}

@Aspect(className=Mais)
class MaisAspect extends AtelierAspect{

	def simulate() {
	}

	@OverrideAspectMethod
	def String compile() {
		'''mais'''
	}	
}

@Aspect(className=Ovin)
class OvinAspect extends AtelierAspect{

	def simulate() {
	}

	@OverrideAspectMethod
	def String compile() {
		'''ovin'''
	}	
}

@Aspect(className=Sorgho)
class SorghoAspect extends AtelierAspect{

	def simulate() {
	}

	@OverrideAspectMethod
	def String compile() {
		'''sorgho'''
	}	
}
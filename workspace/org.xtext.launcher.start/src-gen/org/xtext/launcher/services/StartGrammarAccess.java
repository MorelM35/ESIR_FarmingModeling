/*
* generated by Xtext
*/
package org.xtext.launcher.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class StartGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class LauncherElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Launcher");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLauncherKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBeginAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBeginDateParserRuleCall_3_0 = (RuleCall)cBeginAssignment_3.eContents().get(0);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cEndAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEndDateParserRuleCall_5_0 = (RuleCall)cEndAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cQMaxKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cEqualsSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cQMaxAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cQMaxEIntParserRuleCall_9_0 = (RuleCall)cQMaxAssignment_9.eContents().get(0);
		private final Keyword cCommaKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cQuantityOfWaterKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cEqualsSignKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cQuantityOfWaterAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cQuantityOfWaterEIntParserRuleCall_13_0 = (RuleCall)cQuantityOfWaterAssignment_13.eContents().get(0);
		private final Keyword cCommaKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cRightCurlyBracketKeyword_15 = (Keyword)cGroup.eContents().get(15);
		
		//Launcher:
		//	"Launcher" "{" "from" begin=Date "to" end=Date "," "qMax" "=" qMax=EInt "," "quantityOfWater" "=" quantityOfWater=EInt
		//	"," "}";
		public ParserRule getRule() { return rule; }

		//"Launcher" "{" "from" begin=Date "to" end=Date "," "qMax" "=" qMax=EInt "," "quantityOfWater" "=" quantityOfWater=EInt
		//"," "}"
		public Group getGroup() { return cGroup; }

		//"Launcher"
		public Keyword getLauncherKeyword_0() { return cLauncherKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"from"
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }

		//begin=Date
		public Assignment getBeginAssignment_3() { return cBeginAssignment_3; }

		//Date
		public RuleCall getBeginDateParserRuleCall_3_0() { return cBeginDateParserRuleCall_3_0; }

		//"to"
		public Keyword getToKeyword_4() { return cToKeyword_4; }

		//end=Date
		public Assignment getEndAssignment_5() { return cEndAssignment_5; }

		//Date
		public RuleCall getEndDateParserRuleCall_5_0() { return cEndDateParserRuleCall_5_0; }

		//","
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }

		//"qMax"
		public Keyword getQMaxKeyword_7() { return cQMaxKeyword_7; }

		//"="
		public Keyword getEqualsSignKeyword_8() { return cEqualsSignKeyword_8; }

		//qMax=EInt
		public Assignment getQMaxAssignment_9() { return cQMaxAssignment_9; }

		//EInt
		public RuleCall getQMaxEIntParserRuleCall_9_0() { return cQMaxEIntParserRuleCall_9_0; }

		//","
		public Keyword getCommaKeyword_10() { return cCommaKeyword_10; }

		//"quantityOfWater"
		public Keyword getQuantityOfWaterKeyword_11() { return cQuantityOfWaterKeyword_11; }

		//"="
		public Keyword getEqualsSignKeyword_12() { return cEqualsSignKeyword_12; }

		//quantityOfWater=EInt
		public Assignment getQuantityOfWaterAssignment_13() { return cQuantityOfWaterAssignment_13; }

		//EInt
		public RuleCall getQuantityOfWaterEIntParserRuleCall_13_0() { return cQuantityOfWaterEIntParserRuleCall_13_0; }

		//","
		public Keyword getCommaKeyword_14() { return cCommaKeyword_14; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_15() { return cRightCurlyBracketKeyword_15; }
	}

	public class DateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Date");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDateAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDayAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDayEIntParserRuleCall_1_0 = (RuleCall)cDayAssignment_1.eContents().get(0);
		private final Assignment cMonthAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMonthMonthEnumRuleCall_2_0 = (RuleCall)cMonthAssignment_2.eContents().get(0);
		private final Assignment cYearAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cYearEIntParserRuleCall_3_0 = (RuleCall)cYearAssignment_3.eContents().get(0);
		
		//Date:
		//	{Date} day=EInt month=Month year=EInt;
		public ParserRule getRule() { return rule; }

		//{Date} day=EInt month=Month year=EInt
		public Group getGroup() { return cGroup; }

		//{Date}
		public Action getDateAction_0() { return cDateAction_0; }

		//day=EInt
		public Assignment getDayAssignment_1() { return cDayAssignment_1; }

		//EInt
		public RuleCall getDayEIntParserRuleCall_1_0() { return cDayEIntParserRuleCall_1_0; }

		//month=Month
		public Assignment getMonthAssignment_2() { return cMonthAssignment_2; }

		//Month
		public RuleCall getMonthMonthEnumRuleCall_2_0() { return cMonthMonthEnumRuleCall_2_0; }

		//year=EInt
		public Assignment getYearAssignment_3() { return cYearAssignment_3; }

		//EInt
		public RuleCall getYearEIntParserRuleCall_3_0() { return cYearEIntParserRuleCall_3_0; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	public class MonthElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Month");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cJanuaryEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cJanuaryJanuaryKeyword_0_0 = (Keyword)cJanuaryEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFebruaryEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFebruaryFebruaryKeyword_1_0 = (Keyword)cFebruaryEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMarchEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMarchMarchKeyword_2_0 = (Keyword)cMarchEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cAprilEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cAprilAprilKeyword_3_0 = (Keyword)cAprilEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cMayEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cMayMayKeyword_4_0 = (Keyword)cMayEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cJuneEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cJuneJuneKeyword_5_0 = (Keyword)cJuneEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cJulyEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cJulyJulyKeyword_6_0 = (Keyword)cJulyEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cAugustEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cAugustAugustKeyword_7_0 = (Keyword)cAugustEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cSeptemberEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cSeptemberSeptemberKeyword_8_0 = (Keyword)cSeptemberEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cOctoberEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cOctoberOctoberKeyword_9_0 = (Keyword)cOctoberEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cNovemberEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cNovemberNovemberKeyword_10_0 = (Keyword)cNovemberEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cDecemberEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cDecemberDecemberKeyword_11_0 = (Keyword)cDecemberEnumLiteralDeclaration_11.eContents().get(0);
		
		//enum Month:
		//	january | february | march | april | may | june | july | august | september | october | november | december;
		public EnumRule getRule() { return rule; }

		//january | february | march | april | may | june | july | august | september | october | november | december
		public Alternatives getAlternatives() { return cAlternatives; }

		//january
		public EnumLiteralDeclaration getJanuaryEnumLiteralDeclaration_0() { return cJanuaryEnumLiteralDeclaration_0; }

		//"january"
		public Keyword getJanuaryJanuaryKeyword_0_0() { return cJanuaryJanuaryKeyword_0_0; }

		//february
		public EnumLiteralDeclaration getFebruaryEnumLiteralDeclaration_1() { return cFebruaryEnumLiteralDeclaration_1; }

		//"february"
		public Keyword getFebruaryFebruaryKeyword_1_0() { return cFebruaryFebruaryKeyword_1_0; }

		//march
		public EnumLiteralDeclaration getMarchEnumLiteralDeclaration_2() { return cMarchEnumLiteralDeclaration_2; }

		//"march"
		public Keyword getMarchMarchKeyword_2_0() { return cMarchMarchKeyword_2_0; }

		//april
		public EnumLiteralDeclaration getAprilEnumLiteralDeclaration_3() { return cAprilEnumLiteralDeclaration_3; }

		//"april"
		public Keyword getAprilAprilKeyword_3_0() { return cAprilAprilKeyword_3_0; }

		//may
		public EnumLiteralDeclaration getMayEnumLiteralDeclaration_4() { return cMayEnumLiteralDeclaration_4; }

		//"may"
		public Keyword getMayMayKeyword_4_0() { return cMayMayKeyword_4_0; }

		//june
		public EnumLiteralDeclaration getJuneEnumLiteralDeclaration_5() { return cJuneEnumLiteralDeclaration_5; }

		//"june"
		public Keyword getJuneJuneKeyword_5_0() { return cJuneJuneKeyword_5_0; }

		//july
		public EnumLiteralDeclaration getJulyEnumLiteralDeclaration_6() { return cJulyEnumLiteralDeclaration_6; }

		//"july"
		public Keyword getJulyJulyKeyword_6_0() { return cJulyJulyKeyword_6_0; }

		//august
		public EnumLiteralDeclaration getAugustEnumLiteralDeclaration_7() { return cAugustEnumLiteralDeclaration_7; }

		//"august"
		public Keyword getAugustAugustKeyword_7_0() { return cAugustAugustKeyword_7_0; }

		//september
		public EnumLiteralDeclaration getSeptemberEnumLiteralDeclaration_8() { return cSeptemberEnumLiteralDeclaration_8; }

		//"september"
		public Keyword getSeptemberSeptemberKeyword_8_0() { return cSeptemberSeptemberKeyword_8_0; }

		//october
		public EnumLiteralDeclaration getOctoberEnumLiteralDeclaration_9() { return cOctoberEnumLiteralDeclaration_9; }

		//"october"
		public Keyword getOctoberOctoberKeyword_9_0() { return cOctoberOctoberKeyword_9_0; }

		//november
		public EnumLiteralDeclaration getNovemberEnumLiteralDeclaration_10() { return cNovemberEnumLiteralDeclaration_10; }

		//"november"
		public Keyword getNovemberNovemberKeyword_10_0() { return cNovemberNovemberKeyword_10_0; }

		//december
		public EnumLiteralDeclaration getDecemberEnumLiteralDeclaration_11() { return cDecemberEnumLiteralDeclaration_11; }

		//"december"
		public Keyword getDecemberDecemberKeyword_11_0() { return cDecemberDecemberKeyword_11_0; }
	}
	
	private LauncherElements pLauncher;
	private DateElements pDate;
	private EIntElements pEInt;
	private MonthElements unknownRuleMonth;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public StartGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.launcher.Start".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Launcher:
	//	"Launcher" "{" "from" begin=Date "to" end=Date "," "qMax" "=" qMax=EInt "," "quantityOfWater" "=" quantityOfWater=EInt
	//	"," "}";
	public LauncherElements getLauncherAccess() {
		return (pLauncher != null) ? pLauncher : (pLauncher = new LauncherElements());
	}
	
	public ParserRule getLauncherRule() {
		return getLauncherAccess().getRule();
	}

	//Date:
	//	{Date} day=EInt month=Month year=EInt;
	public DateElements getDateAccess() {
		return (pDate != null) ? pDate : (pDate = new DateElements());
	}
	
	public ParserRule getDateRule() {
		return getDateAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return (pEInt != null) ? pEInt : (pEInt = new EIntElements());
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//enum Month:
	//	january | february | march | april | may | june | july | august | september | october | november | december;
	public MonthElements getMonthAccess() {
		return (unknownRuleMonth != null) ? unknownRuleMonth : (unknownRuleMonth = new MonthElements());
	}
	
	public EnumRule getMonthRule() {
		return getMonthAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}

/*
* generated by Xtext
*/
grammar InternalStart;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.launcher.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.launcher.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.launcher.services.StartGrammarAccess;

}

@parser::members {

 	private StartGrammarAccess grammarAccess;
 	
    public InternalStartParser(TokenStream input, StartGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Launcher";	
   	}
   	
   	@Override
   	protected StartGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleLauncher
entryRuleLauncher returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLauncherRule()); }
	 iv_ruleLauncher=ruleLauncher 
	 { $current=$iv_ruleLauncher.current; } 
	 EOF 
;

// Rule Launcher
ruleLauncher returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Launcher' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLauncherAccess().getLauncherKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLauncherAccess().getLeftCurlyBracketKeyword_1());
    }
	otherlv_2='from' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLauncherAccess().getFromKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLauncherAccess().getBeginDateParserRuleCall_3_0()); 
	    }
		lv_begin_3_0=ruleDate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLauncherRule());
	        }
       		set(
       			$current, 
       			"begin",
        		lv_begin_3_0, 
        		"Date");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='to' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLauncherAccess().getToKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLauncherAccess().getEndDateParserRuleCall_5_0()); 
	    }
		lv_end_5_0=ruleDate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLauncherRule());
	        }
       		set(
       			$current, 
       			"end",
        		lv_end_5_0, 
        		"Date");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getLauncherAccess().getCommaKeyword_6());
    }
	otherlv_7='qMax' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getLauncherAccess().getQMaxKeyword_7());
    }
	otherlv_8='=' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getLauncherAccess().getEqualsSignKeyword_8());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLauncherAccess().getQMaxEIntParserRuleCall_9_0()); 
	    }
		lv_qMax_9_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLauncherRule());
	        }
       		set(
       			$current, 
       			"qMax",
        		lv_qMax_9_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getLauncherAccess().getCommaKeyword_10());
    }
	otherlv_11='quantityOfWater' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getLauncherAccess().getQuantityOfWaterKeyword_11());
    }
	otherlv_12='=' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getLauncherAccess().getEqualsSignKeyword_12());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLauncherAccess().getQuantityOfWaterEIntParserRuleCall_13_0()); 
	    }
		lv_quantityOfWater_13_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLauncherRule());
	        }
       		set(
       			$current, 
       			"quantityOfWater",
        		lv_quantityOfWater_13_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_14=',' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getLauncherAccess().getCommaKeyword_14());
    }
	otherlv_15='}' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getLauncherAccess().getRightCurlyBracketKeyword_15());
    }
)
;





// Entry rule entryRuleDate
entryRuleDate returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDateRule()); }
	 iv_ruleDate=ruleDate 
	 { $current=$iv_ruleDate.current; } 
	 EOF 
;

// Rule Date
ruleDate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDateAccess().getDateAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDateAccess().getDayEIntParserRuleCall_1_0()); 
	    }
		lv_day_1_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDateRule());
	        }
       		set(
       			$current, 
       			"day",
        		lv_day_1_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDateAccess().getMonthMonthEnumRuleCall_2_0()); 
	    }
		lv_month_2_0=ruleMonth		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDateRule());
	        }
       		set(
       			$current, 
       			"month",
        		lv_month_2_0, 
        		"Month");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDateAccess().getYearEIntParserRuleCall_3_0()); 
	    }
		lv_year_3_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDateRule());
	        }
       		set(
       			$current, 
       			"year",
        		lv_year_3_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEIntRule()); } 
	 iv_ruleEInt=ruleEInt 
	 { $current=$iv_ruleEInt.current.getText(); }  
	 EOF 
;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;





// Rule Month
ruleMonth returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='january' 
	{
        $current = grammarAccess.getMonthAccess().getJanuaryEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getMonthAccess().getJanuaryEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='february' 
	{
        $current = grammarAccess.getMonthAccess().getFebruaryEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getMonthAccess().getFebruaryEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='march' 
	{
        $current = grammarAccess.getMonthAccess().getMarchEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getMonthAccess().getMarchEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='april' 
	{
        $current = grammarAccess.getMonthAccess().getAprilEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getMonthAccess().getAprilEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='may' 
	{
        $current = grammarAccess.getMonthAccess().getMayEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getMonthAccess().getMayEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='june' 
	{
        $current = grammarAccess.getMonthAccess().getJuneEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getMonthAccess().getJuneEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='july' 
	{
        $current = grammarAccess.getMonthAccess().getJulyEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getMonthAccess().getJulyEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='august' 
	{
        $current = grammarAccess.getMonthAccess().getAugustEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getMonthAccess().getAugustEnumLiteralDeclaration_7()); 
    }
)
    |(	enumLiteral_8='september' 
	{
        $current = grammarAccess.getMonthAccess().getSeptemberEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getMonthAccess().getSeptemberEnumLiteralDeclaration_8()); 
    }
)
    |(	enumLiteral_9='october' 
	{
        $current = grammarAccess.getMonthAccess().getOctoberEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_9, grammarAccess.getMonthAccess().getOctoberEnumLiteralDeclaration_9()); 
    }
)
    |(	enumLiteral_10='november' 
	{
        $current = grammarAccess.getMonthAccess().getNovemberEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_10, grammarAccess.getMonthAccess().getNovemberEnumLiteralDeclaration_10()); 
    }
)
    |(	enumLiteral_11='december' 
	{
        $current = grammarAccess.getMonthAccess().getDecemberEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_11, grammarAccess.getMonthAccess().getDecemberEnumLiteralDeclaration_11()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;



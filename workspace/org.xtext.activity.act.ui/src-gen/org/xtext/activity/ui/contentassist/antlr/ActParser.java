/*
* generated by Xtext
*/
package org.xtext.activity.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.activity.services.ActGrammarAccess;

public class ActParser extends AbstractContentAssistParser {
	
	@Inject
	private ActGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.activity.ui.contentassist.antlr.internal.InternalActParser createParser() {
		org.xtext.activity.ui.contentassist.antlr.internal.InternalActParser result = new org.xtext.activity.ui.contentassist.antlr.internal.InternalActParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAtelierAccess().getAlternatives(), "rule__Atelier__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getPeriodicityAccess().getAlternatives(), "rule__Periodicity__Alternatives");
					put(grammarAccess.getMonthAccess().getAlternatives(), "rule__Month__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getPeriodicActivityAccess().getGroup(), "rule__PeriodicActivity__Group__0");
					put(grammarAccess.getPeriodicActivityAccess().getGroup_4(), "rule__PeriodicActivity__Group_4__0");
					put(grammarAccess.getPeriodicActivityAccess().getGroup_10(), "rule__PeriodicActivity__Group_10__0");
					put(grammarAccess.getPeriodicActivityAccess().getGroup_11(), "rule__PeriodicActivity__Group_11__0");
					put(grammarAccess.getPeriodicActivityAccess().getGroup_11_3(), "rule__PeriodicActivity__Group_11_3__0");
					put(grammarAccess.getPeriodicActivityAccess().getGroup_12(), "rule__PeriodicActivity__Group_12__0");
					put(grammarAccess.getPeriodicActivityAccess().getGroup_12_3(), "rule__PeriodicActivity__Group_12_3__0");
					put(grammarAccess.getDateAccess().getGroup(), "rule__Date__Group__0");
					put(grammarAccess.getResAllocationAccess().getGroup(), "rule__ResAllocation__Group__0");
					put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
					put(grammarAccess.getRuleAccess().getGroup_1(), "rule__Rule__Group_1__0");
					put(grammarAccess.getRuleAccess().getGroup_1_2(), "rule__Rule__Group_1_2__0");
					put(grammarAccess.getAtelier_ImplAccess().getGroup(), "rule__Atelier_Impl__Group__0");
					put(grammarAccess.getAtelier_ImplAccess().getGroup_3(), "rule__Atelier_Impl__Group_3__0");
					put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
					put(grammarAccess.getRessourceTypeAccess().getGroup(), "rule__RessourceType__Group__0");
					put(grammarAccess.getPredicateAccess().getGroup(), "rule__Predicate__Group__0");
					put(grammarAccess.getElevageAccess().getGroup(), "rule__Elevage__Group__0");
					put(grammarAccess.getElevageAccess().getGroup_3(), "rule__Elevage__Group_3__0");
					put(grammarAccess.getCultureAccess().getGroup(), "rule__Culture__Group__0");
					put(grammarAccess.getCultureAccess().getGroup_3(), "rule__Culture__Group_3__0");
					put(grammarAccess.getModelAccess().getNameAssignment_2(), "rule__Model__NameAssignment_2");
					put(grammarAccess.getModelAccess().getActivityAssignment_4(), "rule__Model__ActivityAssignment_4");
					put(grammarAccess.getPeriodicActivityAccess().getNameAssignment_2(), "rule__PeriodicActivity__NameAssignment_2");
					put(grammarAccess.getPeriodicActivityAccess().getAtelierAssignment_4_1(), "rule__PeriodicActivity__AtelierAssignment_4_1");
					put(grammarAccess.getPeriodicActivityAccess().getStartAssignment_6(), "rule__PeriodicActivity__StartAssignment_6");
					put(grammarAccess.getPeriodicActivityAccess().getEndAssignment_8(), "rule__PeriodicActivity__EndAssignment_8");
					put(grammarAccess.getPeriodicActivityAccess().getFrequencyAssignment_10_1(), "rule__PeriodicActivity__FrequencyAssignment_10_1");
					put(grammarAccess.getPeriodicActivityAccess().getPeriodicityTypeAssignment_10_2(), "rule__PeriodicActivity__PeriodicityTypeAssignment_10_2");
					put(grammarAccess.getPeriodicActivityAccess().getResAllocationAssignment_11_2(), "rule__PeriodicActivity__ResAllocationAssignment_11_2");
					put(grammarAccess.getPeriodicActivityAccess().getResAllocationAssignment_11_3_1(), "rule__PeriodicActivity__ResAllocationAssignment_11_3_1");
					put(grammarAccess.getPeriodicActivityAccess().getRuleAssignment_12_2(), "rule__PeriodicActivity__RuleAssignment_12_2");
					put(grammarAccess.getPeriodicActivityAccess().getRuleAssignment_12_3_1(), "rule__PeriodicActivity__RuleAssignment_12_3_1");
					put(grammarAccess.getDateAccess().getDayAssignment_1(), "rule__Date__DayAssignment_1");
					put(grammarAccess.getDateAccess().getMonthAssignment_2(), "rule__Date__MonthAssignment_2");
					put(grammarAccess.getResAllocationAccess().getRessourceAssignment_2(), "rule__ResAllocation__RessourceAssignment_2");
					put(grammarAccess.getResAllocationAccess().getDurationAssignment_4(), "rule__ResAllocation__DurationAssignment_4");
					put(grammarAccess.getResAllocationAccess().getPeriodicityTypeAssignment_5(), "rule__ResAllocation__PeriodicityTypeAssignment_5");
					put(grammarAccess.getRuleAccess().getPreAssignment_1_1(), "rule__Rule__PreAssignment_1_1");
					put(grammarAccess.getRuleAccess().getPreAssignment_1_2_2(), "rule__Rule__PreAssignment_1_2_2");
					put(grammarAccess.getAtelier_ImplAccess().getActivityAssignment_3_1(), "rule__Atelier_Impl__ActivityAssignment_3_1");
					put(grammarAccess.getRessourceTypeAccess().getNameAssignment_2(), "rule__RessourceType__NameAssignment_2");
					put(grammarAccess.getElevageAccess().getActivityAssignment_3_1(), "rule__Elevage__ActivityAssignment_3_1");
					put(grammarAccess.getCultureAccess().getActivityAssignment_3_1(), "rule__Culture__ActivityAssignment_3_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.activity.ui.contentassist.antlr.internal.InternalActParser typedParser = (org.xtext.activity.ui.contentassist.antlr.internal.InternalActParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ActGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ActGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}

/*
* generated by Xtext
*/
package org.xtext.activity.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.activity.services.ActGrammarAccess;

public class ActParser extends AbstractContentAssistParser {
	
	@Inject
	private ActGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.activity.ui.contentassist.antlr.internal.InternalActParser createParser() {
		org.xtext.activity.ui.contentassist.antlr.internal.InternalActParser result = new org.xtext.activity.ui.contentassist.antlr.internal.InternalActParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getPredicateAccess().getAlternatives(), "rule__Predicate__Alternatives");
					put(grammarAccess.getBinaryExppressionAccess().getAlternatives_1(), "rule__BinaryExppression__Alternatives_1");
					put(grammarAccess.getTemperatureAccess().getAlternatives_1(), "rule__Temperature__Alternatives_1");
					put(grammarAccess.getPrecipitationAccess().getAlternatives_1(), "rule__Precipitation__Alternatives_1");
					put(grammarAccess.getRayonnementAccess().getAlternatives_1(), "rule__Rayonnement__Alternatives_1");
					put(grammarAccess.getEvapotranspirationAccess().getAlternatives_1(), "rule__Evapotranspiration__Alternatives_1");
					put(grammarAccess.getCheckDoneActivityAccess().getAlternatives(), "rule__CheckDoneActivity__Alternatives");
					put(grammarAccess.getNoRainAccess().getAlternatives_2(), "rule__NoRain__Alternatives_2");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getPeriodicityAccess().getAlternatives(), "rule__Periodicity__Alternatives");
					put(grammarAccess.getMonthAccess().getAlternatives(), "rule__Month__Alternatives");
					put(grammarAccess.getComparatorAccess().getAlternatives(), "rule__Comparator__Alternatives");
					put(grammarAccess.getBinaryExppressionTypeAccess().getAlternatives(), "rule__BinaryExppressionType__Alternatives");
					put(grammarAccess.getGrainStateEnumAccess().getAlternatives(), "rule__GrainStateEnum__Alternatives");
					put(grammarAccess.getResourceTypeAccess().getAlternatives(), "rule__ResourceType__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getAtelierRefAccess().getGroup(), "rule__AtelierRef__Group__0");
					put(grammarAccess.getPeriodicActivityAccess().getGroup(), "rule__PeriodicActivity__Group__0");
					put(grammarAccess.getPeriodicActivityAccess().getGroup_9(), "rule__PeriodicActivity__Group_9__0");
					put(grammarAccess.getPeriodicActivityAccess().getGroup_10(), "rule__PeriodicActivity__Group_10__0");
					put(grammarAccess.getPeriodicActivityAccess().getGroup_10_3(), "rule__PeriodicActivity__Group_10_3__0");
					put(grammarAccess.getPeriodicActivityAccess().getGroup_11(), "rule__PeriodicActivity__Group_11__0");
					put(grammarAccess.getDateAccess().getGroup(), "rule__Date__Group__0");
					put(grammarAccess.getResAllocationAccess().getGroup(), "rule__ResAllocation__Group__0");
					put(grammarAccess.getPredicateAccess().getGroup_0(), "rule__Predicate__Group_0__0");
					put(grammarAccess.getPredicateAccess().getGroup_0_1(), "rule__Predicate__Group_0_1__0");
					put(grammarAccess.getBinaryExppressionAccess().getGroup(), "rule__BinaryExppression__Group__0");
					put(grammarAccess.getBinaryExppressionAccess().getGroup_1_1(), "rule__BinaryExppression__Group_1_1__0");
					put(grammarAccess.getBinaryExppressionAccess().getGroup_2(), "rule__BinaryExppression__Group_2__0");
					put(grammarAccess.getTemperatureAccess().getGroup(), "rule__Temperature__Group__0");
					put(grammarAccess.getPrecipitationAccess().getGroup(), "rule__Precipitation__Group__0");
					put(grammarAccess.getRayonnementAccess().getGroup(), "rule__Rayonnement__Group__0");
					put(grammarAccess.getEvapotranspirationAccess().getGroup(), "rule__Evapotranspiration__Group__0");
					put(grammarAccess.getCheckDoneActivityAccess().getGroup_0(), "rule__CheckDoneActivity__Group_0__0");
					put(grammarAccess.getCheckDoneActivityAccess().getGroup_0_4(), "rule__CheckDoneActivity__Group_0_4__0");
					put(grammarAccess.getNoRainAccess().getGroup(), "rule__NoRain__Group__0");
					put(grammarAccess.getNoRainAccess().getGroup_2_0(), "rule__NoRain__Group_2_0__0");
					put(grammarAccess.getNoRainAccess().getGroup_2_1(), "rule__NoRain__Group_2_1__0");
					put(grammarAccess.getGrainStateAccess().getGroup(), "rule__GrainState__Group__0");
					put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
					put(grammarAccess.getEFloatAccess().getGroup(), "rule__EFloat__Group__0");
					put(grammarAccess.getModelAccess().getAtelierAssignment_1(), "rule__Model__AtelierAssignment_1");
					put(grammarAccess.getAtelierRefAccess().getIdAssignment_2(), "rule__AtelierRef__IdAssignment_2");
					put(grammarAccess.getAtelierRefAccess().getActivityAssignment_4(), "rule__AtelierRef__ActivityAssignment_4");
					put(grammarAccess.getPeriodicActivityAccess().getNameAssignment_2(), "rule__PeriodicActivity__NameAssignment_2");
					put(grammarAccess.getPeriodicActivityAccess().getStartAssignment_5(), "rule__PeriodicActivity__StartAssignment_5");
					put(grammarAccess.getPeriodicActivityAccess().getEndAssignment_7(), "rule__PeriodicActivity__EndAssignment_7");
					put(grammarAccess.getPeriodicActivityAccess().getFrequencyAssignment_9_1(), "rule__PeriodicActivity__FrequencyAssignment_9_1");
					put(grammarAccess.getPeriodicActivityAccess().getPeriodicityTypeAssignment_9_2(), "rule__PeriodicActivity__PeriodicityTypeAssignment_9_2");
					put(grammarAccess.getPeriodicActivityAccess().getResAllocationAssignment_10_2(), "rule__PeriodicActivity__ResAllocationAssignment_10_2");
					put(grammarAccess.getPeriodicActivityAccess().getResAllocationAssignment_10_3_1(), "rule__PeriodicActivity__ResAllocationAssignment_10_3_1");
					put(grammarAccess.getPeriodicActivityAccess().getRuleAssignment_11_2(), "rule__PeriodicActivity__RuleAssignment_11_2");
					put(grammarAccess.getDateAccess().getDayAssignment_1(), "rule__Date__DayAssignment_1");
					put(grammarAccess.getDateAccess().getMonthAssignment_2(), "rule__Date__MonthAssignment_2");
					put(grammarAccess.getDateAccess().getYearAssignment_3(), "rule__Date__YearAssignment_3");
					put(grammarAccess.getResAllocationAccess().getRessourceTypeAssignment_2(), "rule__ResAllocation__RessourceTypeAssignment_2");
					put(grammarAccess.getResAllocationAccess().getDurationAssignment_4(), "rule__ResAllocation__DurationAssignment_4");
					put(grammarAccess.getResAllocationAccess().getPeriodicityTypeAssignment_5(), "rule__ResAllocation__PeriodicityTypeAssignment_5");
					put(grammarAccess.getPredicateAccess().getDateAssignment_0_1_1(), "rule__Predicate__DateAssignment_0_1_1");
					put(grammarAccess.getBinaryExppressionAccess().getLeftAssignment_1_0(), "rule__BinaryExppression__LeftAssignment_1_0");
					put(grammarAccess.getBinaryExppressionAccess().getLeftAssignment_1_1_1(), "rule__BinaryExppression__LeftAssignment_1_1_1");
					put(grammarAccess.getBinaryExppressionAccess().getOpeAssignment_2_0(), "rule__BinaryExppression__OpeAssignment_2_0");
					put(grammarAccess.getBinaryExppressionAccess().getRightAssignment_2_1(), "rule__BinaryExppression__RightAssignment_2_1");
					put(grammarAccess.getTemperatureAccess().getComparatorAssignment_2(), "rule__Temperature__ComparatorAssignment_2");
					put(grammarAccess.getTemperatureAccess().getValueAssignment_4(), "rule__Temperature__ValueAssignment_4");
					put(grammarAccess.getPrecipitationAccess().getComparatorAssignment_2(), "rule__Precipitation__ComparatorAssignment_2");
					put(grammarAccess.getPrecipitationAccess().getHeightAssignment_4(), "rule__Precipitation__HeightAssignment_4");
					put(grammarAccess.getRayonnementAccess().getComparatorAssignment_2(), "rule__Rayonnement__ComparatorAssignment_2");
					put(grammarAccess.getRayonnementAccess().getValueAssignment_4(), "rule__Rayonnement__ValueAssignment_4");
					put(grammarAccess.getEvapotranspirationAccess().getComparatorAssignment_2(), "rule__Evapotranspiration__ComparatorAssignment_2");
					put(grammarAccess.getEvapotranspirationAccess().getValueAssignment_4(), "rule__Evapotranspiration__ValueAssignment_4");
					put(grammarAccess.getCheckDoneActivityAccess().getActivityToValidateAssignment_0_2(), "rule__CheckDoneActivity__ActivityToValidateAssignment_0_2");
					put(grammarAccess.getCheckDoneActivityAccess().getElapsedTimeAssignment_0_4_0(), "rule__CheckDoneActivity__ElapsedTimeAssignment_0_4_0");
					put(grammarAccess.getCheckDoneActivityAccess().getPeriodicityTypeAssignment_0_4_1(), "rule__CheckDoneActivity__PeriodicityTypeAssignment_0_4_1");
					put(grammarAccess.getCheckDoneActivityAccess().getDateAssignment_1(), "rule__CheckDoneActivity__DateAssignment_1");
					put(grammarAccess.getNoRainAccess().getElapsedTimeAssignment_2_0_1(), "rule__NoRain__ElapsedTimeAssignment_2_0_1");
					put(grammarAccess.getNoRainAccess().getPeriodicityTypeAssignment_2_0_2(), "rule__NoRain__PeriodicityTypeAssignment_2_0_2");
					put(grammarAccess.getNoRainAccess().getDateAssignment_2_1_1(), "rule__NoRain__DateAssignment_2_1_1");
					put(grammarAccess.getGrainStateAccess().getStateAssignment_3(), "rule__GrainState__StateAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.activity.ui.contentassist.antlr.internal.InternalActParser typedParser = (org.xtext.activity.ui.contentassist.antlr.internal.InternalActParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ActGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ActGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
